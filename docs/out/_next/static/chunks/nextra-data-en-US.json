{"/":{"title":"About Me","data":{"":"Hi! I'm Pallas :) Thanks for stopping by!I love sushi, science puns, and the Oxford comma. I concentrate in Chemical and\nPhysical Biology and have a secondary in Government. I enjoy understanding how\nsystems work--biological systems, political systems, you name it! I'm currently\ndoing research on how enzymes work together to make antibiotics. In my spare\ntime, I love watching sunrises with friends.This website contains the work I will be doing in the course \"Introduction to\nDigital Fabrication.\" Come explore with me!"}},"/physci-70/01_intro":{"title":"Week 1: Introduction","data":{"":"Going into this week, I had a couple of ideas.First idea: I'm super interested in toilets. For instance, researchers at\nStanford have invented a toilet that can detect health markers based on disease\nmarkers. Moreover, there are lots of places that don't have access to\ncomprehensive sewer systems. Hence, some researchers are working on creating\nself-containing toilets aka toilets that do not rely on external energy or water\nand can dispose waste by itself. I don't know what I would do entirely with this\nproject except I do think toilets are very cool.Second idea: Lab equipment. Problem is, the thing I primarily work with are\npipettes and I can't think of what else our lab would need. I don't think making\nan electronic pipette would be super satisfying though since electronic/robotic\npipettes have already been made.Talking to Nathan though, he mentioned that there are some researchers in MGH\nwho might need help in creating something to model spinal cords. Hence, I would\nbe interested in that.Third idea: Having something that could create a model of proteins. I really\nlike proteins and was imagining 3D printing amino acids and then having a\nmachine that could link these amino acids into a linear pepetide while modeling\nthe release of water.I think this would be more feasible since peptide bond formation is a standard\nreaction i.e. I don't have a bajillion types of reactions going on.Here is a\nvideo describing peptide bond formation.For now, I think I'm going to go with project idea number 2 (with the spinal\ncord MGH idea) since it's the most concrete and has a real-life impact. But if 2\ndoesn't work out, I'll most likely do 3."}},"/physci-70/02_cad":{"title":"Week 2: 2D Design & Cutting","data":{"":"Porphyrin Box","background#Background":"If you haven't gotten to known Dilek yet, you're missing out. Dilek is the most\namazing and wonderful human being: kind, smart, the entire package, really. She\nwas the instructor of my Experimental Inorganic ?(Chem 145) course and also my\nInorganic chemistry (Chem 40) course. In Chem 145, I was fortunate enough to\nwork with my project team to create these aromatic compounds (fancy word for\nmolecules with rings in them) called \"porphyrin.\" We were able to substitute\nmetals into the center of these porphyrins and make novel porphyrin molecules.I wanted to give a gift for Dilek to thank her for all of her hard work and help\nthroughout Chem 40 and Chem 145. Chem 145 was such a magical experience, and I'm\nso fortunate for this experience.I wanted to make something practical for Dilek but also has flair. Thus, I\ndecided to make a box with a porphyrin molecule on top.This is the final piece. It is a box with finger joints (7 grooves on each side)\nand a hole on top. The porphyrin molecule, glued onto a circle that snapes onto\nthe box, is the lid.","designing-the-box#Designing the box":"To do this, I first sketched a design on my iPad. I then measured the width of\nthe cardboard and got 4.5 mm. I designed the box on Fusion. At first, I tried to\nmake a 133 mm by 133 mm (since 133 is divisible by 7) square and cut out the\nnotches (4.5 in depth + kerf) from it. However, at the time, I couldn't figure\nout how to cut into the empty space of the box. Thus, I remade my file to be a\nsmaller square (124mm by 124 mm) and added the rectangular notches to it (a 4.5\nX 19 mm rectangle, with adjustment of kerf). However, later, I realized that due\nto how a laser cutter works, either would work (basically, I lost a day's worth\nof work unnecessarily).\nThis is an early file of what me working on one of the squares looks like .I then measured the kerf by cutting out two sample squares with different notch\namounts along the side (I tried 0.2-0.8 mm). and tried to see what \"snapped the\nbest.\"For me, and the cardboard I used, (I later realized that there were different\nthicknesses of cardboard available at the lab), I had a kerf of 0.3 mm on each\nside of the length of the notch (0.6 per notch) and for the depth, it was 1/2\nthe kerf of the length, which is 0.3 mm.Here's an example of one of the things I printed out to see kerf.image of box with kerfI then adjusted my notches to account for the kerf. (I had originally entered a\nparameter of kerf, and so just had to enter what the kerf is). Since I was doing\nnotches, I could either add to the material of each notch or subtract the kerf\nfrom the gap (I confirmed with a TF about this). Thus, I then adjusted my file's\ndimensions and printed it out again. One note about my design: the bottom and\ntop squares are the same (with the exception of the hole of the top square), the\nleft and right square have the same design of notches, and the front and back\nsquares have the same design.Dimensioning took a while, especially since I had 7 indents per side of the\nsquare.\nThis is what the fusion file looks like when done.\nTo note, each piece adds to each other. Throughout the process of using Fusion,\nI used the break and trim tools a lot. Otherwise, as I saw in my early\nprototypes, any stray lines will be cut by the laser cutter. One of my early\nmistakes was not removing the line between the notch and the main square body,\nwhich resulted in my notches being chopped off.After I finalized my design, I sent it to the 3D printer. After the pieces were\nprinted out, I made sure I snap together the different pieces together. It was\nso satisfying to snap!","designing-the-lid#Designing the lid":"I then made the lid. I had to account for kerf for the circle that fits into the\nlid also. Hence, I cut out a variety of circles and tested out which ones fit\ninto the hold on the lid the best. I then glued another circle on top to make\nthe lid \"pop up\" even more. I then made the porphyrin design to glue on the lid.\nI first made a ChemDraw file to draw the molecule and I consulted my little\nbrother to convert it to a Fusion file. This took a LONG time since the\ndifferent angles had to be built from scratch (if you look at my porphyrin\nengraving, it's not just lines--rather, it's the outline of the molecule). Since\nI wanted an outline around the drawing/shape of the porphyrin, I used ovals to\ncut out the shape. On the laser-cutting computer, I then used different colors\nwith corresponding depths to make sure I was cutting out the outline but etching\nin the porphyrin design. The right speed and power to accomplish this took a\ncouple of tries, especially since the design is intricate.In addition,\nI originally had a cut of the lid that looked too square-ish..\nThen, I had the porphyrin engraved on a circle, but it seemed too basic. Hence,\nI redesigned the outline to be more curvy.Ultimately, these were the settings I used.I then attached the porphyrin to the circle lid that snaps into the box to yield\nmy product!Here is a\ncool video\nof the lid design being cut out.","putting-everything-together#Putting Everything together":"Here are all the different pieces I ended up withI then snapped them together to get my final box!","modeling-two-lab-items#Modeling two lab items":"The other part of this week's assignment was to model two items from lab or from\nhome. The two items I decided to model are an acetone bottle and pliers. Nate\ntold me that we could integrate the tutorial version. Aka I watched\nthis tutorial and followed along\nwhile modeling my two objects. To note, this tutorial was useful but referenced\ncommands/clicks from the mouse a lot, which I did not have access to. Hence, I\ndecided to also Google things as I go.","acetone-bottle#Acetone bottle":"The first item I modeled was an acetone bottle. I started off with measuring the\ndimensions of the bottle with a caliper and recording it down. I then sketch the\ncorresponding shape with the dimensions (154 by 97.34 mm) and extruded it out to\nthe depth I needed them to be (65 mm). I then used the fillet tool with a radius\nof 5 to fillet the edges. From the top view, I also tried the additional border\nof extrustion that is present on the top of the acetone bottle. However, error\nmessages kept on popping up when I tried doing that and Fusion kept on crashing,\nso for full transparency, I did not include it but will instead describe how I\nwould have approached this last part. I would use a rectangle to sketch on the\ntop view and extrude it by 1 additional mm. It's a minor detail that would make\nit look even more accurate.","acetone-bottle-lid#Acetone Bottle Lid":"The cap had an outer diameter of 52.87 and an inner diameter of 49.46 mm. Hence,\nI first extruded the outer circle, then placed my concentric inner circle in the\nouter circle and extruded it further.Fusion crashed a couple of times I worked with this (frusturating, yes).\nExample of it crashingBut eventually I got it and here is the product!","pliers#Pliers":"The second item I modeled wwere a pair of pliers. I started off with measuring\nthe dimensions of the bottle with a caliper and recording it down. I then sketch\nthe corresponding shape with the dimensions and extruded it out to the depth I\nneeded them to be. I sketched the model with the dimensions on paper. The width\nof the rectangular hole for the the pliers was 1.3 mm. The circle on the pliers\nhas a diameter of 1.6 mm. The notch beneath that circle was 1.30 mm. From the\nplier handles to the legs of the pliers, the length was 91.56mm. The inside of\nthe handle had a width of 21.27 mm and the width of it was 46.32 mm. The bottom\nof the handle to the middle where it started curving out was 42.15 mm. To make\nthe corner of the handle curved, I superimposed\na circle and used the trim tool to make my desired shape.Honestly, modeling this was difficult: since I've never used the arches before,\nit was difficult to get the best arch for the handles. I ended up using the\nmirror tool. to reflect, but this is honestly something I could improve on\nsince, as you can see, my handles still look a bit off.Here is the final product!Ultimately, learning how to model on Fusion has been a good experience for me,\nand I look forward to continuing to develop and improve my skills in it!"}},"/physci-70/03_motor_circuitry":{"title":"Week 3: Mechanical Design","data":{"":"Moving through the chemistry career of Christina Woo","background-on-project#Background on Project":"I am making a gift for Christina Woo, a faculty of Chemistry and Chemical\nBiology here at Harvard. She was my professor of Chem 17 (Principles of Organic\nChemistry) and Chem 170 (Chemical Biology) and has been an amazing mentor.Thinking about Christina, I decided to make a wooden engraved periodic table as\nthe background board. In the front, I would have clear acrylic gears that are\nengraved with key highlights of her research, such as DISCOVERY OF SMALL\nMOLECULE BINDING SITE HOTSPOTS, CHEMICAL CONTROL OF THE O-GLCNAC PROTEOME, and\nCHEMICAL CONTROL OF THE UBIQUITIN PROTEASOME SYSTEM. In addition, I would have\ngears corresponding to the three courses she teaches(mass spectrometry\nnanocourse, Chem 170, Chem 17) In total, I had 12 gears. These gears would be\nmovable by a motor for the purpose of this assignment, but notably, should be\nremovable since I am not giving her the arduino Thus, this design should also be\nhand-operatable. These were the constraints I was working under.I got inspired by using this project as a gift for her because \"gears\" are often\nthought as an analogy for thinking (\"my gears are turning\") and I thought the\ngears were also a good depiction of how chemical biology builds on top of itself\nand that with each turn and advancement in the field and with research interest,\nit influences others as well (hence the linking together of the gears).I started by drafting and drawing on paper and chalkboard.This is the final piece. It is a periodic table with a name on it. In this\nsection, I will be discussing the troubles I had along the way and also the\nsuccesses.Here is the gif of it turning with a motor! It turned quickly :) I liked the\nfast speed (this gif is real-time), although I could adjust it with the\npotentiometer.","designing-and-cutting-the-gears#Designing and cutting the gears":"I used the Fusion plug in. In total, I needed 12 gears. I made two of them 14\nspoke, two of them 16 spoke, two of them 18 spoke, two of them 20 spoke, two of\nthem 22 spoke, and two of them 24 spoke. I used the settings displayed in this\nscreenshot and just altered number of teeth.I then typed 3 research interests of Christina Woo into three of the gears.\nSince her research topics have pretty long names, I just engraved on the ones\nwith 22 spoke and 24 spoke primarily. I then typed the names of the 3 courses\nChristina teaches into three of the spokes.I also had a spoke that had a bigger hole (6X6) for the motor to attach to.On the laser cutting software, I then sized it down and saved the file so I\nwould have the dimensions at hand in case I would ever need to reprint (which\nhappened quite often) This was a very very long process in terms of laser\ncutting. I never worked with acrylic before and the settings were very\nnit-picky. Since I was engraving words on top of the gears (which were small), a\nlot of time cracking would occur. For instance, compare the difference between\nthese two images, which\nhad two different settings. Thus, it took me a while to adjust the settings in\norder to get legible engraving. I had six tries of adjusting the power before I\ngot the right depth of cut. Ultimately, the settings that worked for me were\nSpd: 5 Pwr: 70 for the portion I wanted to cut out and spd: 85 pwr: 1 for the\npart that I wanted to etch.I found a black and white periodic table that I liked online. Unfortunately, it\nwas not an SVG file and it became blurrly when I converted it to a SVG file. I\nhad to find multiple black and white periodic tables until I found one I\ndecently liked. I then went to illustrator and cleaned it up by deleting\nunncessary text. Im addition, I used the pen tool to trace around my periodic\ntable to ensure a laser path could cut through it.I used the laser cut to etch and cut. The etching was done with a speed of 10\nand a power of 10. For the outline which I need to cut, I used a sped of 30 and\na pwr of 75.There were some parts of edges that the laser cutter didn't go through though,\nso I recruited Suvin to help me use the scroll saw to cut some parts of it.I then wanted to attach her name (Christina Woo) on top in some form. I\ninitially attempted wire bending; since I designed my gears to attach to the\nperiodic table through wire, I thought I would have the wires that stick through\nthe wood to be longer so I could bend it into the letter of names. I got through\nmaking 3 letters and ran out of wire and decided it wasn't feasible. The thinner\nwire that was available wouldn't hold its shape and the thicker wire was too\nthick to bend.Hence, I decided to laser cut the letters. At first, my letters were too skinny\nand those fell through the grates of the laser cut machine. Then they were too\nbig and couldn't fit on all of my gears without blocking the engraving.\nUltimately, what worked was Arial Bold font to make it thicker so I could scale\nit down.Overall, what I did is I used the drill press to make holes corresponding to the\ncenter of gears. I then put a washer between my gear and the board to reduce\nfriction. The gears and washers were attached to the board with wire that I had\nbent. I then put the letters \"Christina Woo\" onto the clear acryllic gears. I\nthen attached my motor. Here is a picture of a closeup of one of my gear\ncomplexes.Notably, to make sure my gears could turn each other, I drilled and attached\nthem to the board one at a time. Aka I would drill a hole and attach everything\nbeforeI basically assembled everything first before gluing my letters on. There was a\nlot of trial and error involved primarily because if the wire got bent in the\npart that touches the gear or the washer, the gear won't turn smoothly. Hence, I\nhad to reattach the gear many times, as well as experiment with different gears\nto make everything flow smoothly. I basically used my hands to manually turn\nthese gears while I was trying to figure out how to make the spacings work.I got it to work extremely well, and my motor was attached to the side. In\naddition, I had a block of wood I used to attach to the back to prop up the\nperiodic table and a block as a shelf for my motor. The red circle is the shelf\nfor the motor at the box. The purple circle is the hotglue that held up the wood\nthat holds up the periodic table when it's on display.GOOD NEWS: After assembling everything worked and everything looked nice. I\nalso attached my motor on the shelf on the back of the periodic table, and with\nglue with extra stability, and my motor turned everything well. I also made sure\nthat the distance between the motor and the gear was the same depth as the\nthickness as the plywood to have the gear perfectly sandwich and rest on top of\nthe periodic table. I was also super proud of it considering all the time I\nspent fine-tuning the design to make my 12 letters in an interesting configuraBAD NEWS: However, this was when everything became a sh*tshow. I decided to\nglue my letters on. Unfortunately, all the strands of the hot glue got stuck\nthroughout--including on the bottom of the gears--making it hard to turn.\nMoreover, some of the letters would interfere with each other while turning.In addition, I had hot glued the stand and the shelf. I made the stand (5 inch\nby 7in by 3 inch block) and the shelf by sanding a lot to make the edges (given\nthat the scroll saw was broken). However, when I exerted too much pressure while\ngluing the letters (and given my non-perfect angled edges due to my methodology\nof \"sanding\"), the pieces of wood became weak. I think a future direction and a\nfuture thing to work on is to glue a piece of wood with a ledge once the scroll\nsaw works again.Thus, I stripped some of the letters off (my plan is to print some of these\nagain to be smaller before giving it as a gift); I didn't think it was a\npriorority as many people still needed to use the laser cutting amachine. Since\nI spent 27+ hours on this already, I thought I would give it a break before\nretyring.I used a breadboard in order to power my motor. The motor turns a plastic stick\nand I had designed one of my gears to attach to it through a 6X6 hole. I used a\nbreadboard that includes wires and a potentiometer to make it turn. Here is a\npicture of it.The motor turns quicker as I turn the potentiometer.Here is a gif of my gear attached to the motor spinning.Here is a gif of me turning my sculpture with my hand.Here is the gif of it turning with a motor!Ultimately, I learned a lot of things including to \"document as you go\" aka\nrecord videos while it still works. Because although I do have a video of it\nturning with the motor and my hand, it genuinely worked flawlessly before I\nglued the letters on so I really wish I had recorded that.","ohms-law#Ohm's law":"With the potentiometer turned to the setting that it was in the video, I saw\nthat it was 150 Ohms of resistance. Since volage (which I had set to 5V on the\narduino) = current*resistance, I got a current of 1/30 volts/ohms. Since ohms\n=volts/amps, this means I got a current of 1/30 amps. Here's a picture of me\nshowing how I measured the resistance"}},"/physci-70/04_microcontrollers":{"title":"Week 4: Microcontroller programming","data":{"":"Expanding upon last week's project: periodic table illustrating the chemistry\ncareer of Christina Woo :)","background-on-project#Background on Project":"Last week, I made a wooden periodic table for Christina Woo with clear acryclic\ngears attached on top. These acrylic gears could be turned by hand or by motor,\nand each gear has an engraving coresponding to Christina's interest. I got\ninspired by using this project as a gift for her because \"gears\" are often\nthought as an analogy for thinking (\"my gears are turning\") and I thought the\ngears were also a good depiction of how chemical biology builds on top of itself\nand that with each turn and advancement in the field and with research interest,\nit influences others as well (hence the linking together of the gears). For more\ndetails about the build of the wooden periodic table with corresponding clear\nacrylic gears, look at last week's entry.This week, I decided to expand upon this project by working specifically on the\nmotor attached to one of the acrylic gears, which in turn turns the rest of the\ngears. As this is the first time I worked with arduino and C++, I wanted to\nlearn a lot and thus decided to build a code that could control the gear with a\nbutton.I took this week as an experimentation of:\nHow to make the gear turn with the button press (but off otherwise).\nSwitch the direction with the press of the button\nSpeed up the gear with the press of the button. After all, I may not\nnecessarily want my gear to turn with full speed at every second. Thus, I\nwant it to be controllable with the button. All of my work is done with the\ngear attached to the motor. As demonstrated last week, the gear can turn the\nrest of the gears, and so I thought it would be more navigatable with working\nwith the gears spearately.\nI discuss how I made the code to do these actions and how I troubleshooted\nthese. I also discuss my circuit design. I took a lot of time in trial and error\nso would be discussing them.For reference, here is the gif of it turning with a motor from last week! It\nturned quickly :)","updates-to-the-periodic-table-with-gears#Updates to the periodic table with gears":"I first made some modifications to the board. As mentioned last week, one of the\nbiggest problems I had with the board was that the letters would either collide\nwith each other with turning or interfere with the wire that turns in the middle\nof the gear.Specifically, the O gave quite a bit of trouble since it's on a gear that is\nsmall. Hence, it would either bump with a neighboring letter or interfere with\nthe wire that's in the middle of the gear.Thus, I decided to rewire the gear attached to the O to have the wire to loop\nover the O rather than like the other gears where the letter is next to the\nwire.In addition, I reglued the letters to ensure they wouldn't collide by placing\nthem side by side on the gear (worst case scenario) and ensuring they wouldn't\ncollide into each other when that happens. Moreover, I reprinted the W to be\nslightly smaller in order to not block any of the engraving on the acrylic\ngears. Here it is displayed with the letters spaced in the optimal distance\napart.","circuitry#Circuitry":"For lab, I had done the exercise that made the LED light turn on with the press\nof the button. I also separately made the circuit and ran the corresponding code\nto make the motor pause for a certain amount of time and turn for a certain\namount of time. (reference here:\nhttps://nathanmelenbrink.github.io/ps70/04_arduino/arduino.html). These were the\ninspirations I had for my objective to have my motor turn controllable by the\nbutton. Here is an example of the circuit I had in class where when I pressed a\nbutton, the LED would turn off.This circuit went through many renditions. But ultimately, I decided to go with\nthe following circuit.Notably, the digital output that connects to the L9110 is the black and white\nwire in pin 3 and 4. This is important because I would have to later indicate\nthis in my code as the output. Moreover, I have a 4-pronged push button (I\noriginally used a 2 pronged push button, but that was harder to use and for me\nto visualize when I had so many wires). Moreover, my button is controlled by\npin 3.In addition, I subbed my resistor out for a stronger resistor (30k Ohms, 5%)\nbecause I was concerned that my leaky voltage (will be described in the next\nsection) was attributed to too weak of a resistor. I have my breadboard\nconnected to 5V through a yellow wire. Essentialy, with the design of my\ncircuit, no voltage would go through unless I press the button, which would then\nallow the flow of electricity between the two pink wires and hence from the\narduino to L9110 the motor.","code#Code":"I first wanted to make my button control having the motor turn. With the press\nof the button, the motor should turn. To do this, I looked at some example codes\nand learned the structure of the arduino code. Essentially, I first set the\nconstants by designating which ones corresponded to my motor output and my\nbutton input.I first tested to make sure my button worked. To do this, I made this code that\nwould give me an output of zero when not pressed and 1 when pressed,\ntheoretically.At first, I got a bunch of sporadic/inconsistent 0s and 1s, which is why I\nswapped my resistor to one that had a higher Ohm value than before (30k Ohms,\n5%). After this modification and additional tinkering to ensure all my wires\nwere secure, I got the following display of 0s when the button is not pressed\nand 1s when the button is pressed, which is what I needed.Originally, I made the following code to make my motor turn only when the button\nwas pressed. . The thought\nwas that without a button press, the motor would not operate (hence the double\nLOW in the else statement). With the button press, it would result it in turning\n(Hence the HIGH, LOW). A huge problem though, was that when my arduino complex\nwas plugged into my computer, there was turning even when the button wasn't\npressed. However, with a button press, it would turn quicker. In addition, I\nfound that if I made the else statement had both of the outputs as HIGH HIGH\nrather than LOW LOW, there would be an initial higher speed that when, with the\npress of the button, would make it go even faster.I tried to debug this--I think there's leaky voltage. However, my circuit made\nsense and my button worked as indicated by the 0s and 1s. I even asked my\nfriends and both the circuit and code made sense to them, and there was no luck.\nI also tried putting an additional if statement that corresponded to if\nbuttonState == 0 just in case it had do with a problem with the else\nstatement. However, this yielded no luck.Hence, I decided that since one of my objectives was to have a situation where\nthe button would make the motor turn quicker, I did in fact experimentally\nachieve this result.Here is the video of it turning quicker with the button press. I decided to make\nthis a video instead of a GIF so you can also press the difference in motor\nsound upon the press of the button (aka you can see the change in speed as\ndemonstrated both visually and audibly).\nHere it is.This was with the turning of it with the else statement having both of the\noutputs as LOW. When I made both of the outputs for the else statement as HIGH,\nthe intial speed was higher and it increased with the press of the button. This\nwould be a cool setting/feature/knowledge for future projects.In addition, while playing around, I realized that I could make the motor turn\nthe other way with a button press. I found this out when I was curious what\nwould happen if alongside, my buttonState == 1, I inserted a\nbuttonState == 0 and else statement with conflicting code (aka A1A = LOW and\nA1B = LOW for one, and A1A = HIGH and A1B = HIGH for the the other). Apparently,\nwhen I do that (here's my code):I get the motor spinning in one direction but it spins in the other direction\nwhen I press the button. Here is the corresponding gif.Admittedly, I don't really know why that happens (this is my first time coding\nthis and my CS knowledge is zero), but again, I am evoking my spirit of an\nexperimental scientist and just taking note that this is what happens with that\ncode.To make a way for the button to be default off but turn on with the putton\npress, I made the default position (without button press) to tell the motor to\ngo in the other direction as the way it usually turns. This is because I had the\n\"leaky\" voltage that caused the motor to turn clockwise even when the button is\nnot pressed. Thus, by turning the motor counterclockwise when the button is not\npressed, the counterclockwise turn counters the clockwise turn and causes the\nmotor to stop. This is the corresponding code.This actually worked! Here's a gif demonstrating the success.","final-reflections#Final reflections":"This was my first time using an arduino, and I also had no prior electronics\nexperience. It is great to know and be able to figure out how to troubleshoot,\nhow to make a circuit, how to write code, and how to program an arduino. I also\nlearned a lot about adapting and using trial and error (as an experimental\nscientist, I approve) to get the desired outcome. I am very proud that I was\ncreate a circuit and code (which are two skills I previously did not have) to\nget my motor to 1. make the gear turn with the button press (but off\notherwise). 2. Switch the direction with the press of the button 3. Speed up the\ngear with the press of the button."}},"/physci-70/05_3d_printing":{"title":"Week 5: 3D printing","data":{"background#Background":"This week, I used the protein modeling software PyMol to alter protein structure\ndesign and obtain the file that I could feed into the 3D printer to print out a\nmodel of Pgm1, an ATP-grasp enzyme that has similar functions to one of the\nproteins I currently investigate.I wanted to work on 3Dp printing proteins/figure out a workflow to do so because\nit is clearly something that should not merely be laser cut. The grooves and\nedges of proteins are highly specific, which would benefit from the protein.For reference, here is what the final structure looks like:After my initial print and figuring out specifics of printing out proteins (for\ninstance, to use surface view rather than cartoon view), I also used Fusion360\nto take it to the next step, designing protein structure jewwelry.","using-pymol#Using Pymol":"Pymol is a protein modeling software that I used to make the different views of\nthe protein.Pymol operates based off of python (hence the \"Py\"). With key commands, I can\nchange the visualization of the protein. First, I retrieved the protein I\nwanted. To do this, I typed in (\"fetch 3wvq\"). 3wvq corresponds to Pgm1; I was\nable to know what the protein structure code was by referencing the paper \"A\npeptide ligase and the ribosome cooperate to synthesize the peptide\npheganomycin.\"After fetching, I then hid the nonbonding aspects of the protein structure by\ntyping in \"hide nonbond\" into the command line. That way these components (free\ncircles that depict water) wouldn't show up in my final product.I created two views:\nCartoon view (left). Thhis shows the secondary structure (helices, beta\nsheets, etc).\nSurface view (right). This shows the surface of the protein/the space that\nthe protein occupies.\nI clicked Show --> as --> cartoon for the cartoon version and Show --> as -->\nsurface for the surface view.Lastly, I saved these two files as STL files.","using-prusa-slicer-software-and-printing#Using Prusa Slicer Software and Printing":"I first used the cartoon version. I uploaded the STL file onto the Prusa Slicer\n(which was configured to the specific printers we had). Then, I scaled the\nprotein down to 25%. Since there was some overhang, I decided to use the\n\"support on build plate only\" feature before pressing \"slice now\" to generate\nthe Gcode.the problem with the cartoon print is, if you look closely, there's a lot of\nstructural support needed, which would be harder to remove, especially since\nsome of the support seems to be sticking into the protein due to the gaps\npresent in the cartoon view due to the gaps between secondary structures.Hence, I decided to test the surface view instead since there's less gaps within\nthe protein structure itself and it focus on the exterior surface; hence, more\nof the protein is connected.Again, I scaled down the file to 25%. I made sure to rotate it to maximize the\nsurface touching the bottom. Afterwards, I added supports on bottom plate. This\nlooked a lot better (in the image below) than the cartoon view.I then had to uplod the Gcode onto the SD card. To do so, I downloaded it on my\nUSB, and then used the computer for the vinyl cutter to transfer the file from\nmy USB to the SD card since the computer for the vinyl cutter had a SD card\nslot.Afterwards, I inserted the SD card into the 3d printer. Estimated time was 1h 40\nminutesHere is a gif of it printing:","post-processing#Post-processing":"This pictorial I made basically sums it up. One other note is that to remove the\nmodel from the 3d printer, I used my fingers to yank it up when cool. This left\na blue ring on the plate, which was easy to remove and through into the waste\nbin.","designing-with-fusion-protein-jewelry#Designing (with fusion) protein jewelry":"After this successful print of my protein and with the knowledge of what to do\nwith it (i.e. it's easier to print a surface view than a cartoon view), then I\nused Fusion 360 to make protein jewelry.To note, after obtaining the proper STL file from PyMol, I imported it into\nFusion 360. For some reason, I wasn't able to import the cartoon view, but that\ndoesn't really matter since I wanted to use the surface view anyways.I then learned how to use the \"pipe tool.\" First, I drew a path that connected\nto my protein by using the sketch tool. Then, after pressing \"finish sketch,\" I\ngot to the main page and I then rotated the structure around my laptop to make\nsure the \"pipe\" was connected to my protein.This is a helpful tutorial on how to use the pipe tool on fusion:\nhttps://www.youtube.com/watch?v=n66_V8TveiMThis is something I could print out in the future.","final-project-progress#Final project progress":"Moreover, this week, I also started thinking more about my final project; I\nemailed some toilet scientists about project ideas, as well as am connecting\nwith a former PS70 alum who worked on something toilet related.Some ideas include improving upon the sensors on hands-free flush toilet;\nhowever, I thought this was a already \"solved\" problem so wasn't super excited\nabout it.Nishi and I have a meeting scheduled for monday, which I am excited to attend.Moreover, part of why I worked on a protein this week was because a backup idea\nis to show a mechanism within proteins, for isntance amide bond hydrolysis.","scanning#Scanning":"I tried using a phone app called \"ScandyPro.\" I wanted to use a phone app\nbecause I am excited to scan objects conveniently, including ones that I see in\neveryday life. I found ScandyPro by doing a few google searches.I scanned my face! To do that, I used the front camera. As you can see with the\nfirst image, like it looked really creepy and there were a couple of holes. I\ntried scanning it a couple of times, but that one still looked the best. I then\nuploaded it onto Prusa Slicer. I scaled it up (200%) and you can see that you\ncan see the depth of my face and mask etc (although it still looks creepy haha)","reflections#Reflections":"It was super cool to work with proteins. I have never touched or felt a 3d\nprinted version of a protein--I've always just seen computational models, so\nthis was super duper cool. Proteins, with all its intricacy, could not be\nproperly represented in a 2d structure. Hence, it's amazing that it could be 3D\nprinted out. I also like the idea of making it into wearable jewelry, which\ncould be made using the pipe tool!"}},"/physci-70/07_output_servo":{"title":"Week 7: Electronic Output devices","data":{"overview#Overview":"1: Use an output device that you haven't used before.I'll be using a Servo :)2: Write a microcontroller program that integrates at least one input device and\none output device. Avoid the delay() function by using either timers or\ninterrupts.For this week, I really wanted to make a useless machine.\nHere is an example of a useless\nmachine.\nEssentially, you press a toggle switch and a mechanical hand pushes it back. I\nlove the humor and the irony behind it and have always wanted to build it.I end up trying a button/LED thing instead.3: Use an oscilloscope to discover the time domain at which your output device\nis operating. Is it on a fixed clock? What's its speed? Share images and\ndescribe your findings.I talked to Nathan about this. I realized retroactively I didn't do this and\nsince I had COVID, he said it was fine that I didn't do this.4: Prepare CAD files for CNC week (after spring break). Consider either 2D DXF\nfiles for routing sheet material (like plywood or OSB), or 3D STL files to mill\nout a (2.5D) shape. We will also cover molding & casting, so you may want to\nconsider milling a mold. Done! I detail my CAD files/what I did in the Week 8\ntab :)","building-the-useless-machine#Building the Useless machine":"I decided to follow the instructions on this website to make the useless\nmachine. https://www.thingiverse.com/thing:4561617 On the website, the STL files\nare provided. I was able to downloaded the STL files and put it directly into\nthe slicer. After I printed out the pieces, I was able to assemble it onto my\nServo with a flat head and a pan head screw.I then plugged it into my arduino.This is what it looked like after I assembled the different pieces together.","code#Code":"I first used this simple Servo code to try to see where the position of the pink\narm would be at 0, 90, and 180 degrees. That way, I could figure out/calibrate\nwhat the degree is in which the pink arm could push the lever. Through testing,\nI found out that the off position is 7. Home is 100 degrees.\n#include <Servo.h>\nServo myservo;  // create servo object to control a servo\nvoid setup() {\n  myservo.attach(9);  // attaches the servo on pin 9 to the servo object\n}\nvoid loop() {\n  myservo.write(0); // tested with 0 degrees, 90 degrees, 180 degrees\n}\n</code></pre>\nI then was able to make this code\n<pre><code>\n#include <Servo.h>\nServo Myservo;\nint switch_pin = 8;\nint servo_pin = 9;\nvoid setup() {\n  pinMode(switch_pin, INPUT);\n  Myservo.attach(servo_pin);\n  }\nvoid loop() {\n  if(digitalRead(switch_pin) == HIGH){\n    delay(1000);\n    Myservo.write(7);\n    delay(900);\n    Myservo.write(100);\n  }\n   if(digitalRead(switch_pin) == LOW){\n    delay(10);\n    Myservo.write(100);\n  }\n}\nHere is the corresponding footage.As you can see, when I push the toggle switch, the mechanical hand pushes it\nback, making it work: yay!!I then continued to try to get rid of the delay function by writing code with\nthe interrupt function.This took FOREVER with lots of debugging. To debug, I put a bunch of print\nstatements. I tried many variations of the following code with no luck\n// variables will change:\nvolatile int buttonState = 0;         // variable for reading the pushbutton status\n#include <Servo.h>\nServo Myservo;\nint switch_pin = A2;\nint servo_pin = 9;\nboolean switchState = LOW;\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(switch_pin, INPUT);\n  Myservo.attach(servo_pin);\n  attachInterrupt(switch_pin, pin_ISR, HIGH);\n}\nvoid loop() {\n // if (analogRead(switch_pin > 500)) {\n // switchState = HIGH;\n// }\n // else {\n  //  switchState = LOW;\n  // }\n  Serial.println(analogRead(switch_pin));\n}\nvoid pin_ISR() {\n  Myservo.write(7);\n  delay(900);\n  Myservo.write(100);\n  Serial.print(1);\n}","ledbutton#LED/Button":"I tried to use the interrupt function so when I press a button, it turns on an\nLED. I followed tutorials that explained how to use the interrupt function, so\nas this one: https://www.youtube.com/watch?v=QtyOiTw0oQc&t=251sI then ran the code and it worked! Code referene:\nhttps://www.allaboutcircuits.com/technical-articles/using-interrupts-on-arduino/I wired the breadboard as a simple circuit where the button is connected to the\nLED:\nconst int buttonPin = 2;     // the number of the pushbutton pin\nconst int ledPin =  13;      // the number of the LED pin\n// variables will change:\nvolatile int buttonState = 0;         // variable for reading the pushbutton status\nvoid setup() {\n  // initialize the LED pin as an output:\n  pinMode(ledPin, OUTPUT);\n  // initialize the pushbutton pin as an input:\n  pinMode(buttonPin, INPUT);\n  // Attach an interrupt to the ISR vector\n  attachInterrupt(0, pin_ISR, CHANGE);\n}\nvoid loop() {\n  // Nothing here!\n}\nvoid pin_ISR() {\n  buttonState = digitalRead(buttonPin);\n  digitalWrite(ledPin, buttonState);\n}\nHere's a video of it working:As noted, I wasn't able to use an oscilloscope and talked to Nathan about it and\nhe said to not worry about it since I had COVID when I realized this part of the\nassignment!","reflections#Reflections":"Honestly, working with the useless machine was a little frusturating because of\nthe troubleshooting that came with it and with no fruitful result. Overall,\nthough, it was good to learn how to use the interrupt function. Many YouTube\ntutorials I watched talked about how interrupt is an underutilized function, so\nI'm glad to have learned it."}},"/physci-70/06_input_devices":{"title":"Week 6: Electronic input devices","data":{"background#Background":"So, today, I will be doing three things\nMake a capacitive sensor to measure a physical quantity with your\nmicrocontroller.\nI will discuss my three versions of this\nSelect another sensor of your choosing (temperature, microphone, etc.).\nI will specifically be using a thermosister.\nCalibrate each sensor and visualize data in the form of a table or graph.\nDiscuss the relationship between the signals recorded by your microcontroller\nand the physical quantities that you're measuring.\nI will be discussing how I did this in each section.","thermistor#Thermistor":"My potential final project is related to composting toilets. Hence, I thought it\nwould be valuable to look into making a thermosister, which could be used in\nexamples like measuring the temperature of the compost that comes out of the\ncomposting toilet. To do this, I looked at the Arduino create website as\nreference\n(https://create.arduino.cc/projecthub/Marcazzan_M/how-easy-is-it-to-use-a-thermistor-e39321).\nI then recreated the circuit displayed in the pictorial.I then looked at the sample code corresponding to the thermosister and played\naround with it. Notably, the top display types in the degrees for Kelvin and\nCelsius. However, it only prints the graph for the Farenheit and I want it to\nalso display the value for the Farenheit in the Serial plotter itself. As you\ncan see based on the image below, there is no value next to the orange\nrectangle. Instead, the corresponding value is on the plotter. However, I wanted\nthe farenheit value to be both in the graph and also have the value typed out.I thus played around with the code in attempts to have the farenheit temperature\nbe displayed in the graph but also have the temperature be explicity written out\non the serial plotter. This turned out to be a larger challenge than originally\nthought. I tried putting print commands in various locations, all to no luck. I\nalso checked the serial monitor constantly to ensure that values were being\noutputted onto the serial monitor.For instance, this is an example of something that didn't work: You can see that\nthe numbers overlap with each otherHere's also something that didn't work:Ultimately, I was able to play around and get the display on the serial plotter\nI wanted: aka the numerical writing of the temperature in C, F, K, as well as\nthe plotting of the F.Ultimately, this was the code that I used at the end. I was able to get the\nFarenheit temperature to be both displayed on the graph and for the value to be\ntyped out alongside the other numbers as well.\n//Thermometer with thermistor\n/*thermistor parameters:\n * RTI: 10 000 Ω\n * B: 3977 K +- 0.75%\n * TI:  25 C\n * +- 5%\n */\n//These values are in the datasheet\n#define RTI 10000   // Ω\n#define B 3977      // K\n//--------------------------------------\n#define VCC 3.3    //Supply voltage\n#define R 10000  //R=10KΩ\n//Variables\nfloat RT, VR, ln, TE, TI, VRT;\nvoid setup() {\n  Serial.begin(9600);\n  TI = 25 + 273.15;                 //Temperature TI from datasheet, conversion from Celsius to kelvin\n}\nvoid loop() {\n  VRT = analogRead(A0);              //Acquisition analog value of VRT\n  Serial.println(VRT);\n  VRT = (3.30 / 1023.00) * VRT;      //Conversion to voltage\n  VR = VCC - VRT;\n  RT = VRT / (VR / R);               //Resistance of RT\n  Serial.println(\"RT/RTI\");\n  Serial.println(RT/RTI);\n  ln = log(RT / RTI);\n  Serial.println(\"Ln\");\n  Serial.println(ln);\n  TE = (1 / ((ln / B) + (1 / TI))); //Temperature from thermistor\n  TE = TE - 273.15 -11;                 //Conversion to Celsius\n  // Serial.print(\"Temperature:\");\n  // Serial.print(\"\\t\");\n  Serial.print(TE);\n  Serial.print(\"C\\t\\t\");\n  Serial.print(TE + 273.15);        //Conversion to Kelvin\n  Serial.print(\"K\\t\\t\");\n  Serial.print((TE * 1.8) + 32);    //Conversion to Fahrenheit\n  Serial.print((TE * 1.8) + 32);\n  Serial.println(\"F\\t\\t\");\n  delay(500);\n // if TE > 26\n  //else\n}","calibration-of-temperature#Calibration of temperature":"To calibrate it, I borrowed a thermometer from my lab and compared it to the\ntemperature that I was getting on my serial monitor. It was about 11 degrees C.\nHence, I accounted for that in my code by subtracting 11 degrees when\ncalculating temperature.","capacitative-sensing#Capacitative sensing":"","sound#Sound":"During lab on Thursday, Rob and I explored using capacitative sensing for sound.\nEssentially, we had put copper sheets in the metal bowl like soWe noticed that there was a peak in the serial plotter every time we yelled into\nthe bowl or clapped into our hands, presumably due to the vibration of the air\nand how that affects the capacitative sensing. However, this was a bit hard to\nquantiatively gauge. Thus, I decided to use capacitative sensing based on\ndistance.","distance#Distance":"The first iteration was my \"cup idea.\" Essentially, I squeezed the cup and sae\npeaks the more I squeezed the cups because the capacitative sensors were closer\ntogether. I used a ruler to measure the distanceAlthough this displayed results and visible peaks when I squeezed it, it was a\nlittle difficult to squeeze the cup at a specific distance. Moreover, the\ncurvature of the cup made it a bit difficult to deterHere's what the serial plotter output looks like:My next iteration was the \"eraser idea\" Essentially, I moved the erasers along a\nruler to see the total distance moved. I would then look at the serial plotter\nto see the corresponding graph. This was much more consistent than the cup, but\nI still wanted something more accurate/wasn't as subject to the angle of the\neraser.My little brother, who was on Spring break and with me at the time, suggested\nthat I use the vice in the lab instead. That way, I have more control over the\nactual distance. As demonstrated in the video, I can crank it to get it a fixed\nposition. Thus, I can directly crank it to the distance I want it to be.The peaks of this looked a lot more consistent. By going back and forth between\nthe two same distances, I'm also able to get very stable peaks like so. Here's\nwhat the serial plotter output looks like:Thus, I moved on to the calibration part.","calibration-and-data#Calibration and data":"Here was my data based on the distance between the two parts of the wood (which\nthe capacitative sensors are attached to) and the serial plotter output in the\ny-axis. The closer the capacitative sensors are to each other, he greater the\ny-axis value.\nPlotting the data and examining the data closer, it seems like the signal is\nvery strong when the two copper foils are touching each other. After this\ninitial peak, as they are further apart, the signal on the y-axis decreases by\naround 10 units for every 10 mm it's moved apart. Then, once we get to 45 mm\napart, the capacitative sensors are no longer in range to detect each other, and\nthe signal is at a constant 1140 units.Thus, 1140 is the baseline for \"no signal,\" and each increase in 1 unit on the y\naxis corresponds to 1 mm (based on the equation of the line of best fit) of the\ncapacitative sensor that's moved towards the capacitative sensor, followed by a\nlarge peak once it touches.","reflections#Reflections":"It was super cool to work further with electronics. As someone with no\nelectronics background and someone who hasn't worked with sensors, this was a\nvery valuable experience! I'm hoping to use these skills in my final project and\nbeyond. Especially since I see a lot of cool projects with sensors on YouTube\n(such as on the channels of Michael Reeves and Simone Giertz), I think I have\nthe confidence to use these sensors in cool projects!"}},"/physci-70/09_wireless":{"title":"Week 9: Radio, WiFi, Bluetooth (IoT)","data":{"":"For another week that incorporates Wifi documentation, check out my work on\nweek 11, which mentions both the Wifi component and\nalso the html display component! :)","assignment#Assignment":"Demonstrate communication between a microcontroller and another device.\nOptionally, work with a partner to control a device remotely.","background-on-project#Background on Project":"Part of my final project includes communication between my microcontroller and\nanother device. In essence, I want to have my temperature and my gas sensor to\nbe the input and be able to go to a website that will tell you if the compost is\nready based on the gas and temperature input. Thus, this week, I am trying to\nsee if I could have my ESP32 act as an access point!What is an access point? Well, this picture from Random nerd tutorials sums it\nup pretty well. Essentially, when the ESP32 serves as an accesspoint, it looks\nsomething like the following:The way Randomnerdtutorials describes it is \"In simple words, when you set the\nESP32 as an access point you create its own Wi-Fi network and nearby Wi-Fi\ndevices (stations) can connect to it (like your smartphone or your computer).\"This in contrast to when a router instead acts as an access point.The premise of my final project is that people can check in on if their compost\nis ready based on a couple of factors like temperature and methane levels.\nHence, it makes sense to have ESP32 act as an access point, because since the\ntoilet can be in more rural areas, there might not necessarily be a router\nnearby.","overview#Overview":"Here is a big picture overview of what happens:\nFirst, I will wire up my breadboard for the thermistor and make sure my\ntemperature code is working\nThem , I will wire up my breadboard for the gas sensor and make sure my gas\nsensing code is working.\nWith each of these components underway, I will then merge these components\ntogether and get the access point component to work.\nI will then have code to essentially set up the access point stuff, for\ninstance putting in information like what I want to call my ESP32 access\npoint and the password to login to the access point. I will also design the\nwebsite to have three buttons. One will show if the gas levels indicate that\nthe compost from the composting toilet is ready. One button will show if,\noverall, the compost is ready.\nWhen I upload and run the accesspoint temperature + gas code on the Arduino,\nI should get an IP address in the serial monitor\nI will login to the ESP32 network and type in the password\nI will then press the restart button on my Arduino, and watch as the website\nupdates to see if my compost is ready.","thermistor#Thermistor":"I first ran the codes for the thermosister and the gas sensor separately to make\nsure it was working. I decided to do this before trying to integrate the\naccesspoint feature. For some reason, although I've previously worked with the\nfollowing temperature code, it just wouldn't work this time. I tried the files I\nworked with and adapted previously by swapping out different variable names and\nensuring the Farenheit temperature was being printed out. I also went to the\nsource and tried using the original code. However, I kept on getting negative\ntemperatures and other malfunctions.Code adapted from\n(https://create.arduino.cc/projecthub/Marcazzan_M/how-easy-is-it-to-use-a-thermistor-e39321)\nthat didn't work this time:\n//Thermometer with thermistor\n/*thermistor parameters:\n * RTI: 10 000 Ω\n * B: 3977 K +- 0.75%\n * TI:  25 C\n * +- 5%\n */\n//These values are in the datasheet\n#define RTI 10000   // Ω\n#define B 3977      // K\n//--------------------------------------\n#define VCC 3.3    //Supply voltage\n#define R 10000  //R=10KΩ\n//Variables\nfloat RT, VR, ln, TE, TI, VRT;\nvoid setup() {\n  Serial.begin(9600);\n  TI = 25 + 273.15;                 //Temperature TI from datasheet, conversion from Celsius to kelvin\n}\nvoid loop() {\n  VRT = analogRead(A0);              //Acquisition analog value of VRT\n  Serial.println(VRT);\n  VRT = (3.30 / 1023.00) * VRT;      //Conversion to voltage\n  VR = VCC - VRT;\n  RT = VRT / (VR / R);               //Resistance of RT\n  Serial.println(\"RT/RTI\");\n  Serial.println(RT/RTI);\n  ln = log(RT / RTI);\n  Serial.println(\"Ln\");\n  Serial.println(ln);\n  TE = (1 / ((ln / B) + (1 / TI))); //Temperature from thermistor\n  TE = TE - 273.15 -11;                 //Conversion to Celsius\n  // Serial.print(\"Temperature:\");\n  // Serial.print(\"\\t\");\n  Serial.print(TE);\n  Serial.print(\"C\\t\\t\");\n  Serial.print(TE + 273.15);        //Conversion to Kelvin\n  Serial.print(\"K\\t\\t\");\n  Serial.print((TE * 1.8) + 32);    //Conversion to Fahrenheit\n  Serial.print((TE * 1.8) + 32);\n  Serial.println(\"F\\t\\t\");\n  delay(500);\n // if TE > 26\n  //else\n}\nHence, I decided to run Rob Hart's temperature code instead, and this went well.Code from Rob Hart:\n/*\nThermistor_read.  Robert Hart June 2020.\nUsing  datasheet for 10k NTC thermistor (Digikey Part No.).  https://www.vishay.com/docs/29049/ntcle100.pdf\nwith constants A and B to calculate Temperature from Resistance.\n10K resitor in series to make a simple voltage divider.\n*/\nint ThermistorPin = A0;\nint Vo;\nfloat R1 = 10000;\nfloat R2, T;\nfloat A = 3.354e-03;\nfloat B = 2.5698e-4;\nvoid setup() {\nSerial.begin(9600);\nanalogReadResolution(12);                 //Using a 32-bit ATSAM microcontroller that has up to 12 bit resolution. 4095 max.\n}\nvoid loop() {\n  Vo = analogRead(ThermistorPin);\n  R2 = R1 * 1/(4096.0 / (float)Vo - 1.0);         //Calculate resistance of thermistor from voltage divider math.\n  T = (1.0 / (A + B*log(R2/R1) ));                 // Calculate temperature using datasheet formula.\n  T = T - 273.15;                                   //Convert from Kelvin to Celcius.\n  Serial.print(\"Temperature: \");\n  Serial.print(T);\n  Serial.println(\"C\");\n  delay(500);\n}\nThus, I decided to use Rob's code for my final rendition.","gas-sensor#Gas Sensor":"There are lots of different types of gas sensors. I decided to use a MQ-4\nbecause that detects methane and CNG gas (compressed methane), since methane is\na byproduct of compost. This website details what the different gas sensors\ndetect for future reference: https://www.mysensors.org/build/gasI then tested the gas sensor to make sure it worked. To note, the gas sensor\nlights up green when it is plugged in correctly.I then tried running the code I found here It's a really simple code that\nMoreover, the gas sensor needs time to warm up, so it accounts for that time\nalso.","integrating-the-different-codes#Integrating the different codes":"Now, essentially, I have three pieces. I have the temperature sensing code. I\nhave the gas sensing code. And lastly, I have the sample code on the Random Nerd\nTutorials Website\n(https://randomnerdtutorials.com/esp32-access-point-ap-web-server/) that\nessentially tells you if your LED light is on or off through accesspoint.I then integrated the different pieces together.First of all, I tried integrating the temperature aspect. It was super weird\nbecause Rob's temperature code worked for me when I was just trying to detect\ntemperature without the access point aspect. However, once I tried integrating\nit into the access point code and trying to make the temperature detectable\nthrough my IP address, it didn't really workHowever, ADC2 pins cannot be used while using the WiFi library (most ESP32\nprojects). ADC 1 pins are okay - that's 32-39, which, for the adafruit Huzzah,\nincludes 32=A7, 33=A9, 34=A2, 36=A4, 39=A3.Thus, that's why I couldn't initially have the temperature show up correctly.For instance, this was my interface, which was wrong given that I shouldn't be\ngetting a negative temperature.Below is the final full code.Basically, in the first part of the code, I declared all the necessary\nvariables. Basically, I took the declared variables from the three parts and\nincluded it in. Then, I put the code for reading the temperature and an if else\nstatement for the code to indicate if a given temperature corresponds to a\ncompost being ready or not (I chose 30 degrees C for the cutoff). I then put in\nthe code for the gas sensor and had a corresponding if else statement for the\ncode to indicate ifa given temperature corresponds to compost being ready or not\n(I chose 300 units as the cutoff). Then, I included the code to setup the Esp32\nas the accesspoint (Taken from Random Nerd tutorials). I then typed in what I\nwanted to my HTML website display to look like, so I specified the corresponding\ncolors and words. I made the rectangle say \"Not ready\" across a red background\nif the given sensor indicates that the compost is not ready, and I made the\nrectangle say \"Ready\" across a green background if the given sensor indicates\nthat the compost is ready. I also hat my HTML website display the corresponding\nvalues, just in case there's something off like a negative temperature, so I\ncould tell if a compost is not ready because of a legit reading or a bug. By\ndisplaying the values, the user could also see how close their compost is to\nbeing done.Each of my subparts (temperature, gas, accesspoint) had a different Baud\nassociated with it. I chose the highest Baud (11520) to use as the Baud for my\nfinal integration\n// Load Wi-Fi library\n#include <WiFi.h>\n//Define for gas sensor\n#define MQ4pin (A2) //changed from A0\nfloat sensorValue;  //variable to store sensor value\n// Replace with your network credentials\nconst char* ssid     = \"ESP32-Access-Point\";\nconst char* password = \"123456789\";\n// Set web server port number to 80\nWiFiServer server(80);\n// Variable to store the HTTP request\nString header;\n//taken from Rob's code\nint ThermistorPin = A3; //can't be A0 pin according to https://nathanmelenbrink.github.io/ps70/10_networking/setup.html\nint Vo;\nfloat R1 = 10000;\nfloat R2, T;\nfloat A = 3.354e-03;\nfloat B = 2.5698e-4;\nString TEString;\nString temperatureState;\nString gasState;\nString overallState;\nvoid setup() {\n  Serial.begin(115200);\n  analogReadResolution(12);                 //Using a 32-bit ATSAM microcontroller that has up to 12 bit resolution. 4095 max. Taken from Rob's code\n  // Initialize the output variables as outputs\n  // Connect to Wi-Fi network with SSID and password\n  Serial.print(\"Setting AP (Access Point)…\");\n  // Remove the password parameter, if you want the AP (Access Point) to be open\n  WiFi.softAP(ssid, password);\n  IPAddress IP = WiFi.softAPIP();\n  Serial.print(\"AP IP address: \");\n  Serial.println(IP);\n  server.begin();\n}\nvoid loop(){\n  //Temperature\n  Vo = analogRead(ThermistorPin);\n  //Serial.println(ThermistorPin);\n  R2 = R1 * 1/(4096.0 / (float)Vo - 1.0);         //Calculate resistance of thermistor from voltage divider math.\n  T = (1.0 / (A + B*log(R2/R1) ));                 // Calculate temperature using datasheet formula.\n  T = T - 273.15;                                   //Convert from Kelvin to Celcius.\n  Serial.print(\"Temperature: \");\n  Serial.print(T);\n  Serial.println(\"C\");\n  delay(500);\n  TEString = String(T);\n  if (T>30) {\n    temperatureState =\"ready\";\n  } else {\n    temperatureState = \"not ready\";\n  }\n  // Temperature end\n  //Gas\n   sensorValue = analogRead(MQ2pin); // read analog input pin 0\n  Serial.print(\"Sensor Value: \");\n  Serial.print(sensorValue);\n  Serial.println(\"\");\n  delay(2000); // wait 2s for next reading\n  if (sensorValue > 300) {\n    gasState =\"ready\";\n  } else {\n    gasState = \"not ready\";\n  }\n  //Gas end\n  //Overall Start\n  if (gasState == \"ready\" & temperatureState == \"ready\") {\n    overallState = \"ready\";\n  } else {\n    overallState = \"not ready\";\n  }\n  //Overall end\n  WiFiClient client = server.available();   // Listen for incoming clients\n  if (client) {                             // If a new client connects,\n    Serial.println(\"New Client.\");          // print a message out in the serial port\n    String currentLine = \"\";                // make a String to hold incoming data from the client\n    while (client.connected()) {            // loop while the client's connected\n      if (client.available()) {             // if there's bytes to read from the client,\n        char c = client.read();             // read a byte, then\n        Serial.write(c);                    // print it out the serial monitor\n        header += c;\n        if (c == '\\n') {                    // if the byte is a newline character\n          // if the current line is blank, you got two newline characters in a row.\n          // that's the end of the client HTTP request, so send a response:\n          if (currentLine.length() == 0) {\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\n            // and a content-type so the client knows what's coming, then a blank line:\n            client.println(\"HTTP/1.1 200 OK\");\n            client.println(\"Content-type:text/html\");\n            client.println(\"Connection: close\");\n            client.println();\n            // Display the HTML web page\n            client.println(\"<!DOCTYPE html><html>\");\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\n            // CSS to style the on/off buttons\n            // Feel free to change the background-color and font-size attributes to fit your preferences\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\n            client.println(\".button { background-color: #FF0000; border: none; color: white; padding: 16px 40px;\"); //changed to Red\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\n            client.println(\".button2 {background-color: #4CAF50 ;}</style></head>\"); //changed to Green\n            // Web Page Heading\n            client.println(\"<body><h1>Is the compost of your composting toilet ready? </h1>\");\n            client.println(\"Temperature indicates that compost is \" + temperatureState + \"</p>\");\n            client.println(\"Temperature is \" + TEString + \"C\" + \"</p>\");\n            // If the output27State is off, it displays the ON button\n            if (temperatureState==\"not ready\") {\n              client.println(\"<p><a href=\\\"/26/on\\\"><button class=\\\"button\\\">NOT READY</button></a></p>\");\n            } else {\n              client.println(\"<p><a href=\\\"/26/off\\\"><button class=\\\"button button2\\\">READY</button></a></p>\");\n            }\n            client.println(\"</body></html>\");\n            // Gas website\n            client.println(\"Gas levels indicate that compost is \" + gasState + \"</p>\");\n            client.println(\"Gas level is \" + String(sensorValue) + \" units\" + \"</p>\");\n              if (gasState == \"not ready\") {\n              client.println(\"<p><a href=\\\"/27/on\\\"><button class=\\\"button\\\">NOT READY</button></a></p>\");\n            } else {\n              client.println(\"<p><a href=\\\"/27/off\\\"><button class=\\\"button button2\\\">READY</button></a></p>\");\n            }\n              client.println(\"</body></html>\");\n            // Overall\n            client.println(\"Overall, your compost is \" + overallState + \"</p>\");\n            if (overallState == \"not ready\") {\n              client.println(\"<p><a href=\\\"/27/on\\\"><button class=\\\"button\\\">NOT READY</button></a></p>\");\n            } else {\n              client.println(\"<p><a href=\\\"/27/off\\\"><button class=\\\"button button2\\\">READY</button></a></p>\");\n            }\n              client.println(\"</body></html>\");\n            // The HTTP response ends with another blank line\n            client.println();\n            // Break out of the while loop\n            break;\n          } else { // if you got a newline, then clear currentLine\n            currentLine = \"\";\n          }\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\n          currentLine += c;      // add it to the end of the currentLine\n        }\n      }\n    }\n    // Clear the header variable\n    header = \"\";\n    // Close the connection\n    client.stop();\n    Serial.println(\"Client disconnected.\");\n    Serial.println(\"\");\n}\n}\nThe Serial Monitor told me that the IP address was http://192.168.4.1/. Hence,\nwhen I connect to ESP32-Access-Point and go to the website. I am able to see the\ninterface.Final interface:","electronics#Electronics":"Here is what the breadboard looked like with just the thermistor on it that\ndidn't work for the accesspoint because the input wire was plugged into A0.Here is what the breadboard looked like with just the thermistor on it.Here is what the breadboard looked like with both the thermistor and gas sensor\non.","reflections#Reflections":"This was honestly so cool. I didn't even know accesspoint was a thing. It was\ngreat to be able to create a network wich such a small device!Although it wasn't a focus in this documentation, I also got to play around with\nthe ESP32 Cam in class and lab, which was loads of fun. The Huzzah Cam had\nsurprisingly good quality and had a similar setup idea where the serial monitor\ninforms the address to go to. Here is more information about the ESP32 Cam:\nhttps://nathanmelenbrink.github.io/ps70/10_networking/setup.html!"}},"/physci-70/10_whack_a_covid":{"title":"Week 10: Machines","data":{"":"Project: Rise of COVID/whack-a-COVID","background#Background":"This week, I was trying to make a whack-a-COVID. Essentially, with the awfulness\nof COVID, I wanted to see if I could make a whack-a-mole but with COVID instead\nof a mole. You could also think of it as the rise of COVID: aka the COVID\npandemic rose unexpectedly in 2020, just like how I'll make a corona rise\nunexpectedly.I primarily wanted to do this because I thought it would be interesting to learn\nhow to convert rotational motion to linear motion. This is also a challenge in\nterms of positioning, which a stepper motor would be helpful for. I consulted\nthis video (https://www.youtube.com/watch?v=6BkYcqe8Vmo&t=54s) for some\ninspiration as to some cartoons in terms of how to make linear motion from\nrotational motion.I wanted to nail down the action of the corona randomly rising up and being able\nto go back to position.Here is the final product (2X speed since the original file was too big to be\nmade into a gif). I'll detail how I made this below.For this week's project, I wanted to get my corona to rise up and down with a\nstepper motor (and at a random interval)","stepper-motor-and-breadboard#Stepper motor and breadboard":"Stepper motors allow for smoother motion through incremental \"steps.\" They can\nalso carry a decent load and have good positional control. One of the cons,\nhowever, is that it is bulkier.I first made sure that my Stepper motor could work and function. Here is a\npicture of my breadboard.To note, my stepPin is 4, and my dirPin is 5. Moreover, I wired the breadboard\n(Kassia also helped me with this) so no external battery needed to be hooked up.\nYou'll notice by looking at the image that I used an Arduino Feather. On the\nbreadboard, there is also a capacitor and the driver (red). The wiring allows\nthe code to be executed and tells the motor what to do and how many steps to\ntake. This page\n(https://nathanmelenbrink.github.io/ps70/12_machine/steppers.html) details the\nbenefits of Stepper motors and the function of each component.I made sure to select the correct output port and have the board be the Feather.\nNathan's website here\n(https://nathanmelenbrink.github.io/ps70/10_networking/setup.html) details how\nto set up to accept the Arduino feather.","making-the-covid-virus-joints-and-accessories#Making the COVID virus, joints, and accessories":"","covid#COVID":"Here is the vector file I used for the virus: I found it off of the internet but\nessentially wanted to make sure it would be a simple outline. The holes are also\na bonus feature. I then made a hole that could fit my screw. In my first\nversion, I decided to just hotglue my virus to the rod instead because I thought\nthere was no point in attaching it through a bolt. However, later on after I\nre-laser cut my corona virus with wood instead of corona, I decided to bolt it\non instead to provide me with the flexibility of length.When I ran this file, I did it with a speed of 100 and a power of 45 but since\nit took a while to cut, I think I could up the speed next time especially since\nI did it on cardboard.After repeated prototyping and my struggles (that will be described in the later\nsections), I realized that I should laser cut it again with wood to be more\nsturdy. After multiple days of working with my carboard COVID, it had begun to\nbend and was a bit flimsy. Hence, I laser cut it on wood to be studier (as\nopposed to carboard the first round). I did it with 65 power and 10 speed.Here's what it looked like on the laser cutter!In the future, if this works I would probably 3D print my COVID virus molecule\nso it could endure more impact.","joints#Joints":"I then made a variety of different joints on the laser cutter. When I designed\nit on Fusion, I made sure it was compatible with M4 nuts and bolts. Moreover, to\nfigure out the kerf, I had made the first few holes of my joints of varying\nwidths on my Fusion file. Moreover, I made a lot of holes so I can experiment\nwith the linkages and what would make the Corona successfully \"pop\" out the\nbest. To note, initially, because I used this composite wood material, it was a\nbit hard to cut. Hence, I had to fish it out using the spreader like so:Having a set of different linkages with holes along the way made it, and I'm\nglad I made that decision. They were also not that hard to design. I just had to\nmake a rectangle and put equidistant circles across the rectangle. That way, I\ncould ensure that the nuts and bolts were a snug fit to the linkage.Also due to repeated testing, the wood began to get worn by the stepper motor.\nHence, I 3D printed a joint out since that was less likely to be worn out. This\njoint was 70 by 20 mm with circles of a diameter of 5mm evenly spaced (10 mm\napart frome each other).","linkage-holder#Linkage holder":"Here is the design of the linkage holder itself. My little brother had suggested\nI 3D print that white piece to secure to the top panel rather than just directly\nsecure the wood to the top panel (linkage holder) to make sure it's more secure\nespecially since there's more surface area between the white piece and the top\npanel as compared to the wood and the top panel.Here is the corresponding sketch that the linkage holder was extruded from.\nEssentially, I was able to get the measurements from measuring the thickness of\nthe wood of the linkage I was attaching to it.","assembled-covid-and-joints#Assembled COVID and joints.":"Essentially the way it works is that there would be a linkage with the\ncoronavirus attached to it. This linkage would be attached to another bottom\nlinkage, which would be secured to the the motor. Thus, when the motor turns,\nthe coronavirus would be pushed up. In addition, I would have another linkage\nparallel to that bottom linkageThis was my first prototype. However, when I tested it out, the reach of the\ncorona was too short.Hence, I redesigned it to be like this instead, which had a good reach. (I also\ngot rid of the double parallel bars to extend the reach)","stepper-motor-mount#Stepper motor mount":"My little brother was visiting me for Spring Break during this week and helped\nme design a stepper motor mount.That way I could mount my Stepper motor to the bottom of my box without damaging\nthe Stepper motor.","main-infrastructure#Main infrastructure":"For the infrastructure itself, I decided to use cups for my first prototype.\nEssentially, I laser cut the top panel, which is wood with a slit for the\ncoronavirus molecule to go through. I then glued the top onto cups that were\ntaped onto each other.However, the base with the cups was two flimsy and kept on being toppled over.\nHence, I decided to do something more secure. This made me decide to make a box\nfor me to be able to put all the electronics. I measured the dimensions that I\nwanted for the box. I wanted the box to be 23.5 CM X 20 CM X 10 CM. I first\nensured everything was up to par on Fusion. Then, I downloaded it as a dxf file\nand transferred it to the laser cutting software:.I originally wanted it to be cut out of acrylic instead wood so I could see the\nmechanism through an acrylic box. Unfortunatately, while making this project, we\nonly had a little bit of continuous acrylic left--not enough to make my box.\nHence, I ended up cutting the box with wood as the materialThis is what it looks like after being cut:.I cut the other half of the box out of carboard because at this point in time,\nwe had actually unfortunately run out of wood. Moreover, the one benefit of\nhaving half of the box out of thick carboard is I could cut out a panel in the\nback for me to change things if needed. Essentially, a box cutter was used to\ncut this back panel, thus allowing me to look at the mechanism from the back and\nswap out parts if needed. I then cut the top panel with the slit separately.Here is what it looks like from the back, where I cut out a door panel for me to\nlook inside:.\n.As you can see from my cutout, I have a blue servo mount coupled with the first\nlink, which is 3D printed. The rest of the linkages are wood. I made sure the\nratio of the linkages were so that the Corona could peak out the hole on the\ntop. In addition, to secure the whole contraption to the box, I had 3D printed\nsomething to hold the wood linkage and attach to the top panel. My little\nbrother had suggested I 3D print that white piece to secure to the top panel\nrather than just directly secure the wood to the top panel (linkage holder) to\nmake sure it's more secure especially since there's more surface area between\nthe white piece and the top panel as compared to the wood and the top panel.","code#Code":"To see how rapid something was moving/better picture the movement of the code, I\nattached a piece of cardboard ot the shaft of the motor.That way, when the motor turns, I was able to better picture what was going on.I initially adapted the code we used in lab by altering the duration of the\ndelay to be shorter.However, I realized a fundamental flaw: for a whack-a-covid, we don't: want to\nknow when the COVID will rise up. Much like covid, it surprises us when it comes\nup.Hence, I decided to write this other code, piecing together components of\ndifferent sample code, testing it, and making sure it works.\n.In terms of my testing process, I wanted when the COVID to pop up to be random.\nIn addition, the COVID molecule needs to be able to come through the slit at the\nright angle and right position.I essentially wanted the COVID to move up and then move down. I experimented\nwith where to put the delay, as well as the right speed to have it. To make the\nstepper motor go down, I had to experiment with the position to be the \"down\"\nposition. -101 worked well for me as the \"down\" position.","modifications#Modifications":"The stepper motor kept vibrating too much, so I decided to connect my circuit to\na stronger external battery (9V) to see if that would help things. It did not.\nThus, I tried a couple of Stepper motors until I found one that was much more\nsmooth and didn't shake as much.","repeatable-results#Repeatable results":"I was able to calibrate it to get repeatable results through the securement of\nthe stepper motor onto the bottom with the mount and the attachment to the top\npanel with a 3D printed piece. Moreover, my first linkage piece was also 3D\nprinted (whereas my other pieces were in wood) to make sure it wouldn't get worn\noff as much. Thus, there were multiple points of securement. Moreover, by\ndesignating the exact position to be the resting position and telling my COVID\nto get to the resting position through the code, it returns to the same location\neach time. Hence, here's another clip of it doing it again..","reflections#Reflections":"As you can see, this project took took lots of trial and error and testing. I\nwas ultimately very satisfied with my work for this project. It was super cool\nto work further with electronics and working with Stepper motors, which I\nhaven't worked with before. Especially since stepper motors are more precise/has\nsmooth motion, I'm excited to have learned how to use it. Working with a stepper\nmotor was a little finicky though, so now I know the benefits/cons of using a\nstepper motor. Future steps include attaching a capacitative sensor at the\nbottom of the box, that way lights or something could flash when the corona\nvirus touches the bottom of the box."}},"/physci-70/12_vacuum_forming":{"title":"Week 12: Wildcard week","data":{"":"This week we got to choose what we wanted to do! I decided to do two projects:\none was the vacuum forming project. The other was composites.","vacuum-forming#Vacuum forming":"This was what the machine looked like.Basically, I cut a piece of this clear plastic and clamped it between the metal\nsquare (the metal square displayed at the top of the machine in the picture\nabove). Then, I used the red handle to ensure the metal square attached to the\nplastic is near the top of the machine. Then, I turned on the heat. The heat\nslowly melts the plastic. While the heat is warming the plastic, I placed the\nlaser-cutting tool (the below picture is what it looks like) onto a piece of\nwood. Placing it ontop of the wood before putting it on top of the metal balls\nmakes it easier to peel later on.Once the plastic becomes translucent, I lower the metal square-plastic combo\ndown to go over the laser-cutting tool. I then press the vacuum button and watch\nas the plastic molds over the laser cutting tool. I then take thhe plastic\nformed around the laser cutting tool out and pop out the laser cutting tool.\nHere is what it looks like!","bonus-composites#Bonus: composites":"I also worked on composites! Essentially, in composites, you are able to combine\nmultiple materials to make a composite piece that is tensile and strong.I essentially tore pieces of cloth and wove it into a square. I then put it on\ntop of this plastic-wrap covered. pink pre-formed extrusion. By putting it on\ntop, I am aiming to make a bowl. I then coated these pieces of cloth with resin.\nI then used resin to attach a burlap heart. I then layered it with plastic wrap\nwith holes in it (I created holes by using this device that looked like a spiky\ntorture device) and then these fluff material. Afterwards, I shoved it all into\na vacuum seal bag.\nI then used the vacuum seal device to seal the thing and then I used the vacuum\nsetting to vacuum all air out. You could see the stack of material become more\ncompact. I then let it rest until it was ready. It turned out great!! The\nplastic was a bit hard to peel off though!"}},"/physci-70/11_compost_sensor":{"title":"Week 11: Computer Programming","data":{"background#Background":"For this week's project, I'm using Firebase to give a visual display of if your\ncompost is ready.I was inspired by the app \"Is it dark outside,\" which is an ironic app that\nliterally tells you if it's dark outside. It's the only thing the app does.I too, wanted to make a very simple interface much like \"is it dark outside\"\nthat will tell you if your compost is ready. Hence, it's called \"is your compost\nready?\" and will take input from a thermosister and display a red square ifAlthough I plan on using my ESP32 for my final project as the access point, I\nwanted to explore how to use Firebase, which relies on a router with internet\naccess.I'm super interested in toilets, and one of the ways in which toilets are made\nmore accessible in some parts of the world to people who do not have\ncomprehensive sewer systems is through the creation of compost toilets.\nEssentially, it's a toilet that turns waste to compost without additional energy\nor water input.I wanted to use a monitor that could use sensors to tell you if the compost is\nready or not. For this week's project, I wanted specifically to have temperature\nas the input. After all, compost warms up when it is ready.Hence, for some places where there is nearby router access, this may be a viable\noption in lieu of my final project setup where the ESP32 acts as an access\npoint.","references#References":"Random nerd tutorials\nNathan's website on firebase\nThese were both fantastic resources I referenced throughout this week.","arduino-code-and-breadboard-input#Arduino code and Breadboard (Input)":"I set up my breadboard to have a thermosister. Thus, temperature could be an\ninput. I've worked on running and calibrated the thermositer in a previous week\n(see electronic input week)Here is a picture of my breadboard. I simplified some of the wiring for this\nweek and tested it out. I know it works because there is the expected\ntemperature written out on the serial monitor and serial plotter when I run the\ncode!Below is my code. In the first part of the code, I set up the Arduino software\nto connect with Firebase. I was able to get information like the Firebase_host\nafter I set up a Firebase account and created a project specifically for the\ncomposting toilet. The Random Nerd Tutorials Website I linked above goes through\nhow to set up a project.I referenced the LED code on Nathan's website (linked the resources header\nabove) for the parts that I needed to plug in the information of my Firebase and\nWifi. I also made sure to have the Firebase library and Wifi library installed.I then decided to only include Celsius (unlike prior to week 6, where there were\ndifferent units like Kelvin and Farenheit and corresponding plots) for the\ntemperature.I wrote in an if statement for my temperature code. That way, it knows to tell\nFirebase that the compost is not ready if the temperature is below 25C. However,\nif the temperature is above 25C, it tells Firebase that the compost is ready.\nFor future reference, Rob also has a temperature code on his website that could\nalso be adapted in\n(https://roberthart56.github.io/SCFAB/SC_lab/Sensors/Thermistor/thermistor_read.txt)\nto work on Firebase.\n#include <WiFi.h>                                 // esp32 library\n#include <FirebaseESP32.h>                        // firebase library\n#define FIREBASE_HOST \"https://composting-toilet-default-rtdb.firebaseio.com/\"  // the project name address from firebase id\n#define FIREBASE_AUTH \"aVCTxxSc8jW5FmuHXf9d4qV5meHiMNsqkecpMDJv\"                          // the secret key generated from firebase\n#define WIFI_SSID \"MAKERSPACE\"                                // input your home or public wifi name\n#define WIFI_PASSWORD \"12345678\"                            // password of wifi ssid\nString fireString = \"\";                                          // led status received from firebase\n#define RT0 10000   // Ω\n#define B 3977      // K\n//--------------------------------------\n#define VCC 5    //Supply voltage\n#define R 10000  //R=10KΩ\n//Variables\nfloat RT, VR, ln, VRT, TE, TI;\n//Define FirebaseESP32 data object\nFirebaseData firebaseData;\nvoid setup() {\n  Serial.begin(115200);\n  delay(1000);\n  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);                          // try to connect with wifi\n  TE = 0;\n  TI = 25 + 273.15;                 //Temperature T0 from datasheet, conversion from Celsius to kelvin\n  Serial.print(\"Connecting to \");\n  Serial.print(WIFI_SSID);\n  while (WiFi.status() != WL_CONNECTED) {\n    Serial.print(\".\");\n    delay(500);\n  }\n  Serial.println();\n  Serial.print(\"Connected to \");\n  Serial.println(WIFI_SSID);\n  Serial.print(\"IP Address is : \");\n  Serial.println(WiFi.localIP());                                // print local IP address\n  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);                  // connect to firebase\n  Firebase.reconnectWiFi(true);\n  Firebase.set(firebaseData, \"/TEMP_STATUS\", \"NOT READY\");              // set initial string of \"OFF\"\n}\nvoid loop() {\n  Firebase.get(firebaseData, \"/TEMP_STATUS\");                     // get input from firebase\n  fireString = firebaseData.stringData();                        // change to e.g. intData() or boolData()\n  Serial.println(fireString);\n  VRT = analogRead(A0);              //Acquisition analog value of VRT\n  VRT = (5.00 / 1023.00) * VRT;      //Conversion to voltage\n  VR = VCC - VRT;\n  RT = VRT / (VR / R);               //Resistance of RT\n  ln = log(RT / RT0);\n  TE = (1 / ((ln / B) + (1 / TI))); //Temperature from thermistor\n  TE = TE - 273.15 -11;                 //Conversion to Celsius\n  // Serial.println(TE) //used for debugging and verification of temp\n  if (TE> 25) {\n     Firebase.setString(firebaseData,\"/TEMP_STATUS\", \"ready\");\n  }\n  else {\n     Firebase.set(firebaseData,\"/TEMP_STATUS\", \"not ready\");\n  }\n  delay(1000);                                 // not strictly necessary\n}\nTo note, I had to use the Makerspace Wifi since it has less security, which\nallows this to work.This then feeds it into the Firebase database, which I'll detail below.","firebase#Firebase":"I set up my Firebase by following the instructions on Nathan's Website Nathan's\nwebsite on firebase:\nhttps://nathanmelenbrink.github.io/ps70/10_networking/huzzah1b.htmlRandom nerd tutorials is also useful as another way to explain it:\nhttps://randomnerdtutorials.com/esp32-esp8266-firebase-gauges-charts/I was able to make my composting toilet firebase working! :)This is what the Realtime database looks likeBased on the temperature and the Arduino code I showed above, it either states\nthat the Temp_status is ready or not ready.Hence, right now, since the temperature is not >25 degrees Celsius, it says \"not\nready\" (As verified by my thermometer, which says the temperature is less than\n25 degrees + serial monitor when I put in a line of code so that my serial\nmonitor displays the temperature).When I moved my thermosister closer to my heater and put my finger over it as\nwell, it became >25 and changed it to \"ready.\" This is as confirmed when I\nuncomment a line of code so that my serial monitor displays the temperature.","html-interface#HTML Interface":"This is the code I had worked on (Shoutout to Kassia for helping!!). (It's\nscreenshots of it because my HTML got mad at me that I was pasting in HTML code,\nand the codetags wouldn't work for). I made arrows and white boxes to emphasize\nthe essential components of the HTML code.\nWhen Firebase displays \"not ready\", it displays a red square\nWhen the Firebase displays \"ready\", the html website displays a green square.\nAltogether, when the thermosister reads the temperature is more than 25 degrees\nC, the arduino code tells Firebase to display \"ready\". This then makes the\nsquare turn green. When the thermosister reads the temperature is less than 25\ndegrees C, the arduino code tells Firebase to display \" not ready\". This then\nmakes the square turn red.","variations--notes#Variations + notes":"I also spent some time trying out different sizes of boxes. For instance,\noriginally, I had the box much smaller, but realized it was hard to show around\nduring show and tell Hence, I altered the HTML code to make it a 500 x 500 sized\nsquare rather than 100 X 100 Here's what the dimensions of the box looked like\nbeforeMoreover, when I was trying to debug with Kassia, we communicated via Slack. She\nkept on saying the code worked for her but it didn't work on my computer. Turns\nout there are these ghost numbers, presumably that appeared when I copied a\ndebugged code from Slack. (notice the 0X200b in gray)Also, to note, in my original temperature code from previous weeks, I had used\nthe variables TX and TI to indiciate the temperature and the initial temperature\nrespectively. However, it seems to coincide with some other variable names in\nESP32 or the wifi communication process. Thus, I got a lot of error messages and\nhad to change it to TE and T0 respectively.","reflections#Reflections":"Ultimately, I'm super happy with the result. I like it seeing it change from a\nred square to a green square depending on the given temperature. It's simple,\njust like \"Is it Dark Outside :)\"Green Square"}},"/physci-70/08_cnc":{"title":"Week 8: CNC Milling, Molding & Casting","data":{"background-of-casting-and-molding-idea#Background of Casting and Molding Idea":"My boyfriend has a YouTube channel (Powerhouse of the Cell), and recently we\nworked on a video together in which we animated assembly line proteins\n(https://www.youtube.com/watch?v=aRG0Jnz_gG0&t=63s). To celebrate our\naccomplishment, I wanted to give him a piece of wall decor. Essentially, there\nwould be a neuron that is present in all of his videos. And on the neuron, I\nwould put a heart (becuase, you know, we're dating and heart = lovey dovey\nstuff). The idea is, later on, I could write a note on the heart.","designing-the-file-photoshop-illustrator-fusion#Designing the File (Photoshop, Illustrator, Fusion)":"My boyfriend previously had the file corresponding to the neuron. However, as\nmentioned in the introduction, I also want to insert a heart into the middle.\nHence, I used Fusion to to do this (Fig. 1). This is the overview of my workflowIn the below section, I'll be walking through some of the troubles I encountered\nwith the file upon uploading it into the shopboat and ways in which I tried\nchanging/improving it.","using-the-shopbot#Using the Shopbot":"I followed Joon's tutorial\n(https://nathanmelenbrink.github.io/ps70/07_cnc/Shopbot_Aspire.pdf) to use the\nShopbot. Since I wanted to keep this object and potentially give it as a gift, I\ndecided to use a piece of nice plywood I found on the shelf. Per Joon's\nsuggestion, I drilled the wood into the sacraficial wood. I made sure to make\nsure that the nails could get into the sacarafice wood without sticking up too\nmuch (originally I had a nail that was too long that I took out due to concern\nthat it would interfere with the shopbot.)I measured the width of my wood (0.75 of an inch) and entered it into the\nShopbot. I also made sure to adjust the height of the Shopbot to ensure the\ndrill bit had a piece of paper in between it and the wood.After uploading my file into the Shopbot, I realized my vector file is connected\nto each outer. For instance, the outer lines loops into the inner line. Thus,\nwhen I click the outer line, it also highlights the inner line.I tried adding a line (I tested with Aspire, Fusion, and also Illustrator) or\nadding line breaks on it. However, there was no luck. When I highlighted the\nouter line, parts of the inner line would often also be highlighted; moreover,\nparts of the line would be terminated (Fig. 3). There were other outer lines\nthat were able to be highlighted separately from the inner line. (Fig 4).\nHowever, due to the aforementioned problems, I decided to ask my boyfriend if he\nhad a file of the neuron where the outer lines aren't connected to the inner\nlines. In essence, the file was able to be edited so there wouldn't be an\noutline line. However upon uploading onto my computer and also Fusion, I\nrealized that since the file was made in photoshop, the lines were not super\nclean and were instead made of fragments.Thus, I decided to focus on just the heart aspect. Thus, I could still learn how\nto use the shopbot. I thus shifted focus into making the heart as a way to\ndisplay my jewelry. Hence, I needed to pocket cut. I uploaded a vector file of a\nheart that had two lines (fig. 5) -- an inner drawing of a heart and an outer\noutline of a heart. Upon the upload of the heart file, I scaled the heart to\ndouble the size of the original file since I wanted to be able to hold enough\njewelry. I knew I had to double the size because one of the aspire windows\nshowed the dimensions and upon using a ruler to measure the air, I realized that\nthe displayed size was too small. I used a caliper to approximate/estimate how\nbig to make the heart and thus specified it into the aspire software.Then, I specified to use a pocket cut, with a depth of 14.5 mm (Fig.5).\nEssentially, I specified for there to be an inner line and an outer line.\nAttached are the pictures for what the tool path looked like (Fig. 6).After I finished the work on Aspire, I used the CNC Shopbot software to move the\ndrill bit into the desired location. In attempt to conserve wood, I positioned\nthe drill bit close to the other cuts. I then did a dry run of the cut by having\nthe Z-axis slightly above what it would normally be (so it doesn't cut).GIF of it running:Here is my final product!Overall, I'm pretty happy with it! There's a slight notch in a corner because I\ncut too close to other cuts.","casting-and-molding#Casting and Molding":"I also wanted to make a statue of my hand holding my boyfriend’s hand through\ncasting and molding. This was inspired by an Instagram ad that I saw of a statue\nof a hand. To do this, I recruited my boyfriend (he was enthralled, of course,\nfor the opportunity to hold my hand for an extended period of time).","making-the-hand-mold#Making the hand mold":"I used the skin safe (Alja-safe) alginate molding powder. The powder was\npink-purple. I mixed water in a 1:1 ratio with water, per the instructions. The\ninstructions also suggested using a hand mixer or a beater attached to a drill;\nhowever, I was unable to find one in the lab (and also could not find one in\nstock at the local CVS). Thus, I needed to hand-mix the powder and water. For\nfuture reference, Chris later on messaged in the slack that you could just\nattach a wooden spoon to a drill-- however I was a little unaware while making\nthis. The instructions suggested making a test mold of the thumb first. This\nwent swimmingly, presumably in the hindsight because I needed to mix a smaller\nquantity of Alja-safe and water. Since the instructions suggested warm water, I\nused that. If anything, we could've had it harden faster. Here is the picture of\nthe instructions.\nWith this information, I then proceeded with this formation of my first hand\nmold.Here's what the powder looked like before being mixed with water.And here's the water.We used the scale to measure everything :)\nWith 1/4 warm water and 3/4 cold water, this mold hardened way too quickly.\nIt became chunky very quickly so my boyfriend and I, once we noticed it start\nto get chunky, quickly grabbed each others' hands and dunked it in. However,\nsince this was such a rapid process, we didn't position our hands the best,\nand we could feel the sides of our fingers touch the plastic container. In\naddition, since the alginate had begun to harden, it was super clumpy to get\nin our hands. After the Alja-safe felt firm, we pulled our hands out.\n---> Once this hardened into the mold (it was like a rubbery jelly-like\nconsistency), there were holes throughout the mold. We duct-taped around it to\nprevent leaking. Also, interestingly, the mold secretes this liquid once the\nmold is hardened. It might be the excess water, I'm not sure.\nWe decided to reattempt this again but with less warm warm water and more\ncold water. We did 1/2 warm water and 1/2 cold water. We thought this ratio\nwould make it a lot better but it was still very difficult to stir with the\nwooden stirring bars and we still ran out of time before we felt the alginate\nbegin to harden. Again, we pulled out our hands once the Alja-safe felt firm.\nWe did leave our hands in a bit longer just to be safe, though. --> This mold\nstill looked a bit chunky and a section of alginate actually fell out of it\nonce hardened.\nWe still weren't totally satisified but we wanted to make sure that there was\nenough alginate powder for everyone. So, after asking around, we determined\nthat there was one more group that wanted to use the alginate powder and made\nsure to leave enough for them. We also shared with them what we learned +\ntips to ensure their run goes smoothly. With out last and final attempt, we\nerred on the side of caution. We decided to do 80% cold water and 20% warm\nwater to ensure that we had enough time to mix everything. This time, we were\nable to actually make it into a smooth consistency, which we weren't able to\ndo so before. Once it was smooth, we put our hands in to harden.\n--> We noticed that because we had more time to put our hands in this time, we\nwere able to cover more of our hands. This was reflected later on after we\npoured in the plaster.This is what our hands looked like with the mold liquid around our handsThis is what the molds looked like once hardened.","filling-in-the-plaster#Filling in the plaster":"There were two types of plaster: hydrostone and drystone. I decided to test one\nversion with the hydrostone and one version with the drystone. The hydrostone\nrequired (by weight) 32 parts of water for 100 parts of the powder. The drystone\nrequired (by weight) 18-20 parts (I used 20) of water for 100 parts of the\npowder. Then, the easier process would be used for third (ideally most perfect)\nmold.After the difficulty mixing the alginate mold (pink-purple powder) with water,\nwe tried to see if could get a mixer but we still couldn't find one (CVS also\nran out). For future reference, you could attach a spoon to a drill. Despite the\ncontainer of the drystone and hydrostone suggesting us to mix by a mixer, we\nmixed by hand. Mixing by hand was much easier for the plaster than it was for\nthe alginate mold. Honestly, mixing both was relatively easy. Thus, I decided to\nfill up the first mold we made with the drystone, and the other two with the\nhydrostone.To note, the alginate mold indicated that we should fill in the plaster within 4\nhours; after 4 hours, the alginate mold would begin to degrade.I then filled the three molds with the respective plaster combination.Afterwards, I waited for the plaster to dry. You could tell when the plaster is\ndry because the top becomes matte and when you shake it, there is no liquid\nsound. I also gently patted the top where I poured in the liquid and it was\ndriedThis is what the first mold looked like with the duct tape around it, and I\nturned it around to try to get the hand out.Here is what peeling the plaster hands process looks like. It was pretty\nsatisifying. The peeling process was quite easy and the alginate came out in\nchunks. I used an exacto knife to make the process easier. It was a little\nwatery so I'm glad we had the paper underneath to soak up the liquid.Here is what the plaster hands looked like at the end.\nThe one in the middle is the one I did last. Although it was smoother and had a\nbetter hand shape/covered more of the wrist, it's noted that there are more\nholes in it. The other ones were more rough but didn't have as many holes in it.These imperfections are presumably due to air bubbles/difficulty in pouring to\ncover every crevice. Overall, I'm really happy with the way it turned out!"}},"/physci-70/final_project":{"title":"Final Project: Detecting if the compost of your composting toilet is ready","data":{"":"Note that I had COVID and strep for the week leading up to the final project\nsymposium; the first day out of isolation was the day of the symposium :( Hence,\nI'll also be covering some of my inNoVatIve TecHNIques during quarantine and\nwhile being sick","video#Video":"https://youtu.be/UAPGCq-VoH0\nfun fact: I used my suitcase to pan around my box :)","background#Background":"Over 40% of the world does not have access to a flushing toilet. By\ncontaminating water, open defecation gives rise to a host of diseases including\ndiarrhea, intestinal worm infections, typhoid, cholera, hepatitis, and polio.\nMoreover, there are a variety of social issues associated with a lack of toilets\nwithin households. For instance, open defecation is not socially accepted for\nfemales. This has severe implications. Women are chastised or beaten for openly\ndefecating in the public during the day. That means that from a productivity and\nquality of life standpoint, those same women, because they don’t want to go to\nthe bathroom during the day, may drink less water or manage their diet in a way\nso they don’t have to.Furthermore, females who go to community toilets are often preyed upon.\nCurrently, there is a container system present in some areas. This bucket is\nemptied by being brought to a fecal waste management facility; sometimes, these\nfacilities are very far away. One of the challenges is it fills up quickly and\nthe more often it fills up, the more they have to pay to have it emptied. In\naddition, many community toilets are unclean and pay-per-use, which further\nincentivizes open defecation.This need for better sanitation has spurred a world-wide effort to brainstorm\nand implement ways to make toilets more accessible. Some toilets are funded by\nuniversities and governments. Others are funded by, at least in some part,\nphilanthropy organizations. The Bill and Melinda Gates Foundation launched the\n“Reinvent the Toilet Challenge” in 2011 and has had subsequent “Reinvent the\nToilet” fairs and expos, with the most recent one being in 2018. At these fairs\nand expos, scientists show off their toilet designs for the chance to be further\nfunded by the foundation. To date, the foundation has committed more than 200\nmillion dollars. These innovative toilet designs come in different forms,\nincluding one that concentrates sunlight to disinfect waste and one that uses\nultrasound (sound waves) to remove air pockets from waste, allowing the waste to\nbe more compact. All are linked by a common thread: these toilets are not\nconnected to sewer, water, or electrical lines.One of the innovative self-containing toilets is a composting toilet. There are\nsome different types of composting toilets. For instance, the Tiger Worms toilet\n(http://www.tbfenvironmental.in/) uses tiger worms to degrade waste into\ncompost. There are also these two-pit composting toilets\n(https://www.sulabhinternational.org/sulabh-technologies/). These toilets are\nalso here in our home turf. In Boston, there is also a composting toilet company\n(https://clivusmultrum.com/)The question is: how can you tell when the compost is ready? Obviously, you can\nkeep on checking the feces turned compost or gain experience in telling when\nit's ready. However, it would be much more convenient (and accurate) if there\nwere objective metrics to let you know if your compost is ready.Thus, my idea is to integrate sensors, specifically a temperature sensor and a\nsensor that detects methane levels, to tell the user if their compost is ready.","materials-used#Materials Used":"thermistor, wires, power bank, 3D printer, mq-4 gas sensor, esp32","electronics#Electronics":"The premise of my electronics component is that I want to have my ESP32 act as\nan accesspoint. This is especially important to have ESP32 act as an access\npoint rather than rely on an external router, because since the toilet can be in\nmore rural areas, there might not necessarily be a router nearby.pictorial taken from Random Nerd TutorialsMost of my electronics and code building process can be found on my page for\nweek 9. To avoid repetition, and to make this page cleaner, I've linked it\nhere. Please check it out, since it's really neat stuff!","summary#Summary":"Here is a big picture summary + overview of what happens (Again, please check\nout my documentation for Week 9 for more detail)\nFirst, I wired up my breadboard for the thermistor and make sure my\ntemperature code is working\nThem , I wired up my breadboard for the gas sensor and make sure my gas\nsensing code is working.\nWith each of these components underway, I then merged these components\ntogether and get the access point component to work.\nI then had the code to essentially set up my ESP32 asthe access point, for\ninstance putting in information like what I want to call my ESP32 access\npoint and the password to login to the access point. I will also design the\nwebsite to have three buttons. One will show if the gas levels indicate that\nthe compost from the composting toilet is ready. One button will show if,\noverall, the compost is ready.\nWhen I upload and run the accesspoint temperature + gas code on the Arduino,\nI got an IP address in the serial monitor\nI then login-ed to the ESP32 network and type in the password\nI then pressed the restart button on my Arduino, and watch as the website\nupdates to see if my compost is ready.\nHere is the breadboard I ultimately usedThis is the final code I used\n// Load Wi-Fi library\n#include <WiFi.h>\n//Define for gas sensor\n#define MQ4pin (A2) //changed from A0\nfloat sensorValue;  //variable to store sensor value\n// Replace with your network credentials\nconst char* ssid     = \"ESP32-Access-Point\";\nconst char* password = \"123456789\";\n// Set web server port number to 80\nWiFiServer server(80);\n// Variable to store the HTTP request\nString header;\n//taken from Rob's code\nint ThermistorPin = A3; //can't be A0 pin according to https://nathanmelenbrink.github.io/ps70/10_networking/setup.html\nint Vo;\nfloat R1 = 10000;\nfloat R2, T;\nfloat A = 3.354e-03;\nfloat B = 2.5698e-4;\nString TEString;\nString temperatureState;\nString gasState;\nString overallState;\nvoid setup() {\n  Serial.begin(115200);\n  analogReadResolution(12);                 //Using a 32-bit ATSAM microcontroller that has up to 12 bit resolution. 4095 max. Taken from Rob's code\n  // Initialize the output variables as outputs\n  // Connect to Wi-Fi network with SSID and password\n  Serial.print(\"Setting AP (Access Point)…\");\n  // Remove the password parameter, if you want the AP (Access Point) to be open\n  WiFi.softAP(ssid, password);\n  IPAddress IP = WiFi.softAPIP();\n  Serial.print(\"AP IP address: \");\n  Serial.println(IP);\n  server.begin();\n}\nvoid loop(){\n  //Temperature\n  Vo = analogRead(ThermistorPin);\n  //Serial.println(ThermistorPin);\n  R2 = R1 * 1/(4096.0 / (float)Vo - 1.0);         //Calculate resistance of thermistor from voltage divider math.\n  T = (1.0 / (A + B*log(R2/R1) ));                 // Calculate temperature using datasheet formula.\n  T = T - 273.15;                                   //Convert from Kelvin to Celcius.\n  Serial.print(\"Temperature: \");\n  Serial.print(T);\n  Serial.println(\"C\");\n  delay(500);\n  TEString = String(T);\n  if (T>30) {\n    temperatureState =\"ready\";\n  } else {\n    temperatureState = \"not ready\";\n  }\n  // Temperature end\n  //Gas\n   sensorValue = analogRead(MQ2pin); // read analog input pin 0\n  Serial.print(\"Sensor Value: \");\n  Serial.print(sensorValue);\n  Serial.println(\"\");\n  delay(2000); // wait 2s for next reading\n  if (sensorValue > 800) {\n    gasState =\"ready\";\n  } else {\n    gasState = \"not ready\";\n  }\n  //Gas end\n  //Overall Start\n  if (gasState == \"ready\" & temperatureState == \"ready\") {\n    overallState = \"ready\";\n  } else {\n    overallState = \"not ready\";\n  }\n  //Overall end\n  WiFiClient client = server.available();   // Listen for incoming clients\n  if (client) {                             // If a new client connects,\n    Serial.println(\"New Client.\");          // print a message out in the serial port\n    String currentLine = \"\";                // make a String to hold incoming data from the client\n    while (client.connected()) {            // loop while the client's connected\n      if (client.available()) {             // if there's bytes to read from the client,\n        char c = client.read();             // read a byte, then\n        Serial.write(c);                    // print it out the serial monitor\n        header += c;\n        if (c == '\\n') {                    // if the byte is a newline character\n          // if the current line is blank, you got two newline characters in a row.\n          // that's the end of the client HTTP request, so send a response:\n          if (currentLine.length() == 0) {\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\n            // and a content-type so the client knows what's coming, then a blank line:\n            client.println(\"HTTP/1.1 200 OK\");\n            client.println(\"Content-type:text/html\");\n            client.println(\"Connection: close\");\n            client.println();\n            // Display the HTML web page\n            client.println(\"<!DOCTYPE html><html>\");\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\n            // CSS to style the on/off buttons\n            // Feel free to change the background-color and font-size attributes to fit your preferences\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\n            client.println(\".button { background-color: #FF0000; border: none; color: white; padding: 16px 40px;\"); //changed to Red\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\n            client.println(\".button2 {background-color: #4CAF50 ;}</style></head>\"); //changed to Green\n            // Web Page Heading\n            client.println(\"<body><h1>Is the compost of your composting toilet ready? </h1>\");\n            client.println(\"Temperature indicates that compost is \" + temperatureState + \"</p>\");\n            client.println(\"Temperature is \" + TEString + \"C\" + \"</p>\");\n            // If the output27State is off, it displays the ON button\n            if (temperatureState==\"not ready\") {\n              client.println(\"<p><a href=\\\"/26/on\\\"><button class=\\\"button\\\">NOT READY</button></a></p>\");\n            } else {\n              client.println(\"<p><a href=\\\"/26/off\\\"><button class=\\\"button button2\\\">READY</button></a></p>\");\n            }\n            client.println(\"</body></html>\");\n            // Gas website\n            client.println(\"Gas levels indicate that compost is \" + gasState + \"</p>\");\n            client.println(\"Gas level is \" + String(sensorValue) + \" units\" + \"</p>\");\n              if (gasState == \"not ready\") {\n              client.println(\"<p><a href=\\\"/27/on\\\"><button class=\\\"button\\\">NOT READY</button></a></p>\");\n            } else {\n              client.println(\"<p><a href=\\\"/27/off\\\"><button class=\\\"button button2\\\">READY</button></a></p>\");\n            }\n              client.println(\"</body></html>\");\n            // Overall\n            client.println(\"Overall, your compost is \" + overallState + \"</p>\");\n            if (overallState == \"not ready\") {\n              client.println(\"<p><a href=\\\"/27/on\\\"><button class=\\\"button\\\">NOT READY</button></a></p>\");\n            } else {\n              client.println(\"<p><a href=\\\"/27/off\\\"><button class=\\\"button button2\\\">READY</button></a></p>\");\n            }\n              client.println(\"</body></html>\");\n            // The HTTP response ends with another blank line\n            client.println();\n            // Break out of the while loop\n            break;\n          } else { // if you got a newline, then clear currentLine\n            currentLine = \"\";\n          }\n        } else if (c != '\\r') {  // if you got anything else but a carriage return character,\n          currentLine += c;      // add it to the end of the currentLine\n        }\n      }\n    }\n    // Clear the header variable\n    header = \"\";\n    // Close the connection\n    client.stop();\n    Serial.println(\"Client disconnected.\");\n    Serial.println(\"\");\n}\n}\nUltimately, I get an interface that looks like this:\nAgain, check out my Week 9 documentation for more details!The main things I changed is that since this needed to be portable, I made sure\nthat I was connecting to a rechargeable battery source rather than my laptop.I will also detail more changes I made in the Assembly section below since the\nother changes came up once I started assembling it with my dry box.","dry-box#Dry Box":"I wanted to have a dry box for my electronics. After all, my electronics would\nbe in a composting pit. Thus, I wanted the electronics (breadboard, wires,\nESP32, battery, etc) to be dry. Thus, I decided to make a box that I could use\nto easily access the ESP32 and electronics but also would have a lid to close\nit. Moreover, I wanted it to look like a toilet tank.To do this, I first looked at this link Autodesk gallery link\n(https://gallery.autodesk.com/fusion360/projects/39953/box-w-hinges), which\nfeatures a box with hinges. It wasn't exactly what I wanted but it has hinges so\nI thought it would be a good starting point.Hence, I decided to adapt it. I looked into the history of how the file was made\nto change the dimensions, make additional extrusions, make it what I need it to\nbe.I first needed to make sure that the box could fit everything. It needed to fit\nall the electronics and also the rechargeable battery source. Thus, using a\ncaliper, I determined that I wanted the box to be 150 mm(length) X 70 mm (depth)\nX 85 mm (height).I went to the history of the box of the autodesk file and began editing the\ndimsensions of the sketch. I changed both the dimensions of the lid, as well as\nthe main box. To note, I used the colinear tool beccause I wanted to maintain\nthe hinges in the middle. I also used different tools like the midpoint\nconstrain tools. Thus, I changed the dimensions and used the colinear tool to\nensure that the center is maintained.\nAs part of my design, I wanted a lip to say \"Composting toilet monitor\" to stand\nout. Hence, I decided to take the existing structure and then extrude to the\ndepth that I need the box to be (hence, so the total height is 85 mm). Hence,\nsince the lip is 20 mm, I extruded the base of the box by another 65 mm.I then cut the hole of the box. Specifically, I used the extrusion tool from the\ntop view to cut a rectangle 66.68 mm X 146.80 mm inwards for 60mm.I then made the slots for the thermistor and the gas sensor. I first measured\nthe dimensions. I wanted the thermistor to be able to fit into a hole. Thus, I\nmade the hole to be 4mm in diameter.I also wanted to have rectanglular hole that is slightly smaller than the space\nof the 4 different input wires, so I could glue the female end on the inside of\nthe box and have the gas sensor be able to pox through the rectangular hole\nstraight into the female ends of the wires. Hence, I made this a 2.6 X 10.6 mm\nrectangleTo position where the holes should be I modeled them by stretching across the\nthermistor and the gas sensor and measured how far it was away from the bottom\nof the breadboard. I determined that the thermistor should be 9.53 mm above\nground, 21 mm from the left side. The rectangular hole for the gas sensor wires\nshould have the line of the rectangle closest to the bottom be 9.5 mm away and\n8.762 mm away from the hole for the thermositer.Lastly, I decided to make an indent of the words \"compost toilet monitor.\" That\nway, if someone sees my monitor in a compost pit, they'd know what it's for. It\nlooks like this!Here is the final CAD file (click\nhere to download!After 3D printing it, I used pliers to yank out the support structure. This is\nall the stuff I yanked out!","assembling-the-different-parts-together#Assembling the different parts together":"Because I was in isolation due to COVID, my soldering composed of twisting the\nwires together and using the hot glue in my room to secure the wires together.\nI first placed my breadboard, complete with everything plugged in, into my box.\nYay it fits! I then secured the female end of the wires for the gas sensors\nusing glue and to ensure that it would secured tight enough for the gas sensor\nto easily plug into it.I then plugged in my gas sensor and ensured it fit in well. For maximum\nsecurity, I also glued down the gas sensor with a dab of hot glue, but this is\noptional, especially if you want a design that's more modular.I then \"soldered\" (aka twisted and hot-glued in my room) the wires to the\nthermistor. That way, I can reach the hole designed for the thermistor from my\nbreadboardHere is what it looked like at the end!\nIt worked!!! I was able to get the correct interface when I ran it :) (again, I\nset 30 degrees C as the cutoff for the temp and 800 units for the gas level and\nwas going to change it once I was out of quarantine and had the opportunity to\ntest with real compost. For now, it is a proof of concept)It even looks like a toilet tank!","future-directions#Future directions":"Originally, I was also going to integrate a pH sensor, but it did not\narrive--no worries-- and hence would be a good future direction. Although, pH\nsensors are super finnicky and hard to work with ( and better to use in\nliquid), so I'm not sure if I would actually use it.\nSince I was in isolation, I was unable to test my device on actual compost and\nprovide the precise cutoff values for what temperature and methane level\nindicates that the compost is ready. Before I got COVID, I was planning to go\nto nearby compost pits and see what the temperature and methane level value\nis. Hence, actually testing the device and getting these values would be\nimportant.\nI would also like to fix the tolerance issue to make the gap between the lid\nand the box tighter. Moreover, I would also make the clasp tighter and less\nthin.","reflections#Reflections":"Overall, I'm really happy with the way this project turned out! I've learned a\nlot throughout the process, such as how to set up an ESP32 to be an access\npoint."}}}